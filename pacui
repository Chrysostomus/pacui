#!/bin/bash

#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as 
#  published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
#  =======================
#
#  Design based on IceFox script
#  Modified, adapted and improved by pekman, excalibur1234, Chrysostomus, and papajoker



# all functions of pacui are defined here in the same order as they appear in pacui's UI:


function func_u 
{
		if [[ ! -e /usr/bin/pacaur ]]	# checks, whether file "pacaur" does not exist
		then
			# execute these commands, if "pacaur" is not installed on system
			sudo pacman -Syu --color always
			yaourt -Syua
		else
			# execute these commands, if "pacaur is installed on system
			pacaur -Syu  --color always
		fi
}


function func_diff 
{
		# this function is not called by pacui or pacui's UI directly. instead, it gets called in func_c when no DIFFPROG is set. it provides simple file difference viewer functionality and is essentially a wrapper around "diff". therefore, this function expects 2 arguments!

		local={temp,temp2,temp3}
		temp2="$( echo "$input2" | awk '{print $1}' )"                    # second argument of "pacui diff temp2 temp3"
		temp3="$( echo "$input2" | awk '{print $2}' )"                    # third argument of "pacui diff temp2 temp3"
		temp="$(( ( $(tput cols) - ${#temp2} + ${#temp3} ) / 2 ))"        # calculates half the width of the terminal window ( $(tput cols)=width of terminal window )
		
		# insert extra line with file paths above the diff viewer output:
		echo -n -e "\e[31;1m$temp2"                                       # print first argument (without \newline at the end) = file path of file1 . use ANSI escape sequence to print file names in this line bold and red.
		printf "%*s\n" "$temp" "$temp3"                                   # print second argument (flushed half terminal width to the right) = file path of file2
		tput sgr0                                                         # printf does not support any ANSI escape sequences, so output has to be reset manually using "tput".
		
		# use "diff" as a file difference viewer with many options, which make it look good
		diff --side-by-side --suppress-common-lines --ignore-all-space --color=always --width=$(tput cols) "$temp2" "$temp3"
}


function func_c 
{
		echo "choosing fastest mirror ..." 
		timeout 60 sudo pacman-mirrors -g && echo "" && sudo pacman -Syy --color always
		echo ""
		
		echo "searching orphans ..." 
		if [[ ! -e /usr/bin/pacaur ]]	# checks, whether file "pacaur" does not exist
		then
			yaourt -Qdt
		else
		
			if [[ -n $(pacman -Qdt) ]]  # only run these commands, if output of "pacman -Qdt" is not empty. this happens if there are no orphans.
			then
				pacman -Qdt --color always
				echo "Press ENTER to remove these orphaned packages or CTRL+C to cancel."
				read
				sudo pacman -Rsn $(pacman -Qqdt) --color always --noconfirm
			fi
			
		fi
		echo ""
		
		echo "checking consistency of local repository ..." 
		pacman -Dk
		echo ""
		
		echo "sudo pacdiff ..." 
		if [[ -n $DIFFPROG ]]     # this if-condition avoids error message when $DIFFPROG is not set/empty
		then
			sudo pacdiff
		else
			# use pacdiff to search for .pacnew and .pacsave files. display both the original and the used config file using "pacui_diff" function defined above.
			sudo DIFFPROG="pacui --diff" pacdiff
		fi
		echo ""
		
		echo "sudo journalctl --vacuum-size=50M --vacuum-time=30days ..." 
		if [[ $(cat /proc/1/comm) == "systemd" ]]          # if init system is systemd
		then
			# limit logs in journalctl to an age of 30 days and a combined size of 50mb
			sudo journalctl --vacuum-size=50M --vacuum-time=30days
		fi
		echo ""
		
		echo "paccache ..." 
		# remove all packages, which are not installed on this system, except the latest verions (this is a back up, in case somebody removes networkmanager)
		sudo paccache -rvu -k 1
		echo ""
		# remove all package versions, except the latest 3
		sudo paccache -rv -k 3
		echo ""
		
		
		# 1. extract the name of hard drive the / partition is installed on and write it to the "disk" variatble"
		local disk		# declare local variable
		disk=$(lsblk -o "name,mountpoint" -pa | sed -n '/^\//h;/\/$/{g;p}' | cut -d/ -f3)
		disk="${disk:0:3}"
		# 2. check, whether "disk" is not empty and whether the path to "disk" exists
		if [[ -n $disk && -e "/dev/$disk" ]]
		then
			# open the "rotational" file belonging to your "disk" and checking, whether it contains a "1" - this means your "disk" is a traditional hard drive and no SSD.
			if [[ $(cat "$( find "/sys" -name "rotational" 2>/dev/null | grep "$disk/queue" )" ) == "1" ]]
			then
			# only execute the following line when your / parition is installed on a hard drive.
			echo "sudo pacman-optimize ..." 
			sudo pacman-optimize
			echo ""
			fi
		fi
}


function func_i 
{
		# check, whether file /tmp/pacui-packages-install already exists (the ! negates the result)
		if ! [[ -e /tmp/pacui-packages-install ]]
		then
			# the "package-query -Sl -f '%n  %v  -  %d' " displays a list of all packages from the Manjaro repositories and formats them like "NAME  VERSION  -  DESCRIPTION".
			# write formatted package list of Manjaro repositories to /tmp/pacui-packages-install. then add all package groups to the bottom.
			# finally, download AUR package list, unzip it to /tmp/aur/packages, and add it to the bottom of /tmp/pacui-packages-install.
			package-query -Sl -f "%n  %v  -  %d" > /tmp/pacui-packages-install
			pacman -Sg >> /tmp/pacui-packages-install
			wget -P /tmp/aur/ https://aur.archlinux.org/packages.gz &>/dev/null && gunzip -f /tmp/aur/packages.gz && cat /tmp/aur/packages >> /tmp/pacui-packages-install
		fi
		
		local pkg
		
		# the first part (="NAME") of package list in /tmp/pacui-packages-install-group-manjaro gets (printed and) saved to the "pkg" variable.
		pkg=$(sort -u /tmp/pacui-packages-install | fzf-tmux -m -e +s -i -1 --query="$input2" --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Press TAB to (un)select. Press ENTER to install. Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed list of packages and groups > ' | awk '{print $1}' )
		
		# only run the command inside the if-statement, if $pkg variable is not empty - this happens when fzf is quit with ESC or CTRL+C
		if [[ -n $pkg ]]
		then
			if ( package-query -S $pkg &>/dev/null )        # check, whether $pkg is in manjaro repositories
			then
			
				sudo pacman -S $pkg --color always
				
			else
			
				if [[ ! -e /usr/bin/pacaur ]]	            # checks, whether file "pacaur" does not exist
				then
					yaourt -S $pkg
				else
					pacaur -S $pkg --color always
				fi
			
			fi
		fi
}


function func_r 
{
		# write formatted package list of local repository to /tmp/pacui-packages-group. then add all package groups to the bottom (this makes it easier to remove package groups - if a package group with non-installed packages gets selected, an error is the output).
		package-query -Q -f "%n  %v  -  %d" > /tmp/pacui-packages-group
		pacman -Sg >> /tmp/pacui-packages-group
		
		local pkg
		
		# take a sorted package (and group) list from /tmp/pacui-packages-group, then make the resulting list available to fzf.
		# fzf lets you search and select the given list in a fast way. the "-m" flags makes it possible to select multiple list items.
		pkg=$( sort -u /tmp/pacui-packages-group | fzf-tmux -m -e +s -i -1 --query="$input2" --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Press TAB to (un)select. Press ENTER to remove. Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed list of packages > ' | awk '{print $1}' )
        
		if [[ -n $pkg ]]
		then
			sudo pacman -Rsn $pkg --color always
		fi
}


function func_info 
{
		# check, whether file /tmp/pacui-packages already exists (the ! negates the result)
		if [[ ! -e /tmp/pacui-packages ]]
		then
			# write package list of repositories to /tmp/pacui-packages: download AUR package list to /tmp/aur/packages.gz, unzip it to /tmp/aur/packages, and add it to the bottom of /tmp/pacui-packages.
			pacman -Slq > /tmp/pacui-packages
			wget -P /tmp/aur/ https://aur.archlinux.org/packages.gz &>/dev/null && gunzip -f /tmp/aur/packages.gz && cat /tmp/aur/packages >> /tmp/pacui-packages
		fi
			
		# the following command lets you search through the file "/tmp/pacui-packages" with fzf and save your selection in "pkg"
		local pkg
		pkg=$(sort -u /tmp/pacui-packages | fzf-tmux -e +s -i -1 --query="$input2" --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Press ENTER to display info. Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed list of packages > ')
		
		# only run the command inside the if-statement, if $pkg variable is not empty - this happens when fzf is quit with ESC or CTRL+C
		if [[ -n $pkg ]]
		then
			# next, it is checked, whether "pkg" is part of a list of all installed packages (pacman -Qq).
			if ( pacman -Qq $pkg &>/dev/null )
			then
			
				if [[ ! -e /usr/bin/pacaur ]]	# checks, whether file "pacaur" does not exist
				then
					yaourt -Qii $pkg		    # execute this command when "pkg" is already installed on system
				else
					pacaur -Qii $pkg --color always
				fi
			
			else
			
				if [[ ! -e /usr/bin/pacaur ]]	# checks, whether file "pacaur" does not exist
				then
					yaourt -Sii $pkg		    # execute this command when "pkg" is not installed on system
				else
					pacaur -Sii $pkg --color always
				fi
			
			fi
		fi
}


function func_l 
{
		# check, whether file /tmp/pacui-packages-local already exists (the ! negates the result)
		if [[ ! -e /tmp/pacui-packages-local ]]
		then
			# write package list of Manjaro repositories to /tmp/pacui-packages-local. then add all installed packages to the bottom of /tmp/pacui-packages-local.
			pacman -Slq > /tmp/pacui-packages-local
			pacman -Qq >> /tmp/pacui-packages-local
		fi
		
		local pkg
		pkg=$( sort -u /tmp/pacui-packages-local | fzf-tmux -e +s -i -1 --query="$input2" --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Press ENTER to list files. Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed list of packages > ')
		
		if [[ -n $pkg ]]
		then
			# next, it is checked, whether "pkg" is part of a list of all installed packages (pacman -Qq): the if-statement checks the exit code of the command "pacman -Qq $pkg &>/dev/null".
			if ( pacman -Qq $pkg &>/dev/null )
			then
			
				# "pacman -Ql" shows sometimes more files than "pacman -Fl". therefore, both commands have to be used!
				# take the output of command "pacman -Qlq $pkg" and make it searchable with fzf. for all used fzf flags see "man fzf". store all marked lines in file /tmp/pacui-list.
				pacman -Ql $pkg --color always 2>/dev/null | grep -v "/$" | fzf-tmux -m -e +s -i --query="usr/bin/" --ansi --reverse --margin=4%,1%,1%,1% --inline-info --header="List of files of package \"${pkg}\". Press ESC or CTRL+C to quit." --prompt='Manipulate string to filter displayed package name and file path > ' > /tmp/pacui-l
				
			else
				
				# update local package database. this needs a long time when internet connection is slow.
				# in some cases, the local database has to be initialized with sudo pacman -Fyy
				sudo pacman -Fy
				
				# search in manjaro repositories with "pacman -Fl" --> machine readable version of output is easier to read for awk!
				# the awk command is used to format output: "-F '\0'" set "\0" as separator. this makes it possible to easily use $1,$2,$3,$4 as syntax later.
				# "system( "pacman -Qq " $2 " &>/dev/null" ) == 1" check exit status of "pacman -Qq <package name> &>/dev/null". if error occurs (==1), the package is not installled
				# "{print $1 "/" $2, $4}" prints output nicely formatted.
				pacman -Fl --machinereadable "$pkg" | awk -F '\0' '{print $1 "/" $2 "  " $4}' | grep -v "/$" | fzf-tmux -m -e +s -i --query="usr/bin/" --ansi --reverse --margin=4%,1%,1%,1% --inline-info --header="List of files of package \"${pkg}\". Press ESC or CTRL+C to quit." --prompt='Manipulate string to filter displayed package name and file path > ' > /tmp/pacui-l
				
			fi
		fi
}


function func_t 
{
		# check, whether file /tmp/pacui-packages-local already exists (the ! negates the result)
		if [[ ! -e /tmp/pacui-packages-local ]]
		then
			# write package list of Manjaro repositories to /tmp/pacui-packages-local. then add all installed packages to the bottom of /tmp/pacui-packages-local.
			pacman -Slq > /tmp/pacui-packages-local
			pacman -Qq >> /tmp/pacui-packages-local
		fi

		local pkg
		pkg=$(sort -u /tmp/pacui-packages-local | fzf-tmux -e +s -i -1 --query="$input2" --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Press ENTER to show tree. Press ESC or CTRL+C to quit." --prompt='Manipulate string to filter displayed list of packages > ')
		
		# look in func_info for explanations
		if [[ -n $pkg ]]
		then
			if ( pacman -Qq $pkg &>/dev/null )
			then
				pactree -c $pkg | fzf-tmux -m -e +s -i --ansi --reverse --margin=4%,1%,1%,1% --inline-info --header="Dependency Tree of installed package \"${pkg}\". Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed packages > ' > /tmp/pacui-t
			else
				pactree -c -s $pkg | fzf-tmux -m -e +s -i --ansi --reverse --margin=4%,1%,1%,1% --inline-info --header="Dependency Tree of remote package \"${pkg}\". Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed packages > ' > /tmp/pacui-t
			fi
		fi
}


function func_rt 
{
		local pkg
		pkg=$(pacman -Qq | fzf-tmux -e +s -i -1 --query="$input2" --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Press ENTER to show reverse tree. Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed list of packages > ')
		
		# look in func_info for explanations
		if [[ -n $pkg ]]
		then
			pactree -c -r $pkg | fzf-tmux -m -e +s -i --ansi --reverse --margin=4%,1%,1%,1% --inline-info --header="Reverse Dependency Tree of package \"${pkg}\". Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed packages > ' > /tmp/pacui-rt
		fi
}


# =======================


function func_log 
{
		tail -5000 /var/log/pacman.log | fzf-tmux -m -e +s -i --query="ALPM] " --tac --reverse --margin=4%,1%,1%,1% --inline-info --header="Navigate with PageUp / PageDown Keys. Press ESC or CTRL+C to quit." --prompt='Manipulate string to filter displayed logs > ' > /tmp/pacui-log
}


function func_s
{
		local file
		
		if [[ -n "$input2" ]]
		then
			# do this if variable "input" is not empty:
			file=$"$input2" 
		else
			# do this if pacui is used with UI or no argument is specified in "pacui s" command:
			echo "Enter (parts of) the file name to be searched. Then press ENTER."
			read -r file
			echo
		fi
		
		if [[ -n $file ]]
		then
			
			# list all files of all installed local package. 
			# awk -v VAR="$file" '$NF ~ VAR' searches for $file (using regex) in the last field/column only. 
			pacman -Ql --color always | awk -v VAR="$file" -F '/' '$NF ~ VAR' > /tmp/pacui-search-temp
						
			# update local package database. this needs a long time when internet connection is slow.
			# in some cases, the local database has to be initialized with sudo pacman -Fyy
			sudo pacman -Fy
			
			# search in manjaro repositories with "pacman -Fsx" --> machine readable version of output is easier to read for awk!
			# the awk command is used to format output: "-F '\0'" set "\0" as separator. this makes it possible to easily use $1,$2,$3,$4 as syntax later.
			# "system( "pacman -Qq " $2 " &>/dev/null" ) == 1" check exit status of "pacman -Qq <package name> &>/dev/null". if error occurs (==1), the package is not installled
			# "{print $1 "/" $2, $4}" prints output nicely formatted.
			pacman -Fsx --machinereadable "$file" | awk -F '\0' 'system( "pacman -Qq " $2 " &>/dev/null" ) == 1 {print $1 "/" $2 "  " $4}' >> /tmp/pacui-search-temp
			
			# display results from file /tmp/pacui-search-temp in fzf.
			cat /tmp/pacui-search-temp | fzf-tmux -m -e +s -i --ansi --reverse --query="$file" --margin=4%,1%,1%,1% --inline-info --header="Navigate with PageUp / PageDown Keys. Press ESC or CTRL+C to quit." --prompt='Manipulate string to filter displayed package names and file paths > ' > /tmp/pacui-s
									
		fi
}


function func_b
{
		# declare local variables
		local {cache,pkgR,pkgI,pkgD,line,temp1,temp2,temp3}
		# get cache directory from file /etc/pacman.conf (without any white spaces) and write results to variable "cache":
		cache=$( awk -F '=' '/^CacheDir/ {gsub(" ","",$2); print $2}' '/etc/pacman.conf' )
		# set "cache" varialbe to default directory, if  variable "cache" is empty:
		if [[ -z $cache ]]  # if "cache" variable is empty
		then
			cache="/var/cache/pacman/pkg/"
		fi

		# 1. get list of last installs/upgrades/removes from pacman log and display result in fzf. in the end, fzf saves all selected package names (including the words "installed/upgraded/removed/downgraded" to file /tmp/pacui-cache-packages
		tail -2000 /var/log/pacman.log | grep "\[ALPM\]" | grep "installed\|removed\|upgraded" | sed 's/\[ALPM\] //g' | fzf-tmux -m -e +s -i -1 --query="$input2" --cycle --tac --reverse --margin=4%,1%,1%,2% --inline-info --header="Press TAB to (un)select. Press ENTER to roll back. Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed list of recent Pacman changes > ' | sed 's/ ([^)]*)//g' | awk '{print $3 " " $4}' > /tmp/pacui-cache-packages
		
		# only run the command inside the if-statement, if file /tmp/pacui-cache-packages is not empty and exists - this happens when fzf is quit with ESC or CTRL+C
		if [[ -s /tmp/pacui-cache-packages ]]
		then

			
			# 2. in case of conflicting packages, packages have to be first removed (with the force option, because other packages might still depend on them).
			#filter /tmp/pacui-cache-packages file for the word "installed" and write package names to variable "pkg"
			pkgR=$( awk '/installed/ {print $2}' '/tmp/pacui-cache-packages' )
			
			if [[ -n $pkgR ]]     # this if-condition avoids error message when no package gets removed (and $pkgR is empty)
			then
				sudo pacman -Rdd $pkgR --color always --noconfirm
			fi


			# 3. in case an "upgraded" package needs a package as dependency, the "removed" packages have to be installed.
			#filter /tmp/pacui-cache-packages file for the word "removed" and write package names to file /tmp/pacui-cache-install
			awk '/removed/ {print $2}' '/tmp/pacui-cache-packages' > /tmp/pacui-cache-install
			
			if [[ -s /tmp/pacui-cache-install ]]     # this if-condition avoids error messages when no package gets installed (and /tmp/pacui-cache-install is empty)
			then
				
				# the file /tmp/pacui-install will later contain a list of file names of (old versions of) packages in cache. it has to be empty in the beginning!
				[[ -e /tmp/pacui-install ]] && rm /tmp/pacui-install           # check, whether file exists and delete it.
				
				# read line by line from file /tmp/pacui-cache-install in while loop and save that line to variable $line
				while IFS='' read -r line || [[ -n "$line" ]]
				do
					# write name of latest version in cache into file /tmp/pacui-install ("sort" puts latest version on top, which is then selected): 
					find $cache -name "${line}-[0-9]*[0-9a-z.-_]*.pkg.tar.[gx]z" | sort -r | sed -n '1p' >> /tmp/pacui-install
				done < "/tmp/pacui-cache-install"	
				
				# write file into variable "pkgI" (otherwise, the "sudo pacman -U" command does not work) and unique sort /tmp/pacui-install (=remove duplicate lines without ordering the output) 
				pkgI=$( sort -u /tmp/pacui-install )
				
				# install cannot be done as dependency, because sometimes packages are simply replaced by other packages. in this case, installing as dependency would be bad!
				sudo pacman -U $pkgI --color always --noconfirm
				
			fi


			# 4. filter /tmp/pacui-cache-packages file for the word "upgraded" and write package names to file /tmp/pacui-cache-downgrade
			# /tmp/pacui-cache-downgrade contains list of package names to be downgraded!
			awk '/upgraded/ {print $2}' '/tmp/pacui-cache-packages' > /tmp/pacui-cache-downgrade
			
			if [[ -s /tmp/pacui-cache-downgrade ]]     # this if-condition avoids error messages when no package gets downgraded (and /tmp/pacui-cache-downgrade is empty)
			then
				
				# first, count the number of times the package name appears in file /tmp/pacui-cache-downgrade:
				sort /tmp/pacui-cache-downgrade | uniq -c > /tmp/pacui-cache-downgrade-counted
				# first argument in /tmp/pacui-cache-downgrade-counted is the number of times the package name appears and the second is the package name.
				
				# the file /tmp/pacui-downgrade will later contain a list of file names of (old versions of) packages in cache. it has to be empty in the beginning!
				[[ -e /tmp/pacui-downgrade ]] && rm /tmp/pacui-downgrade           # check, whether file exists and delete it.
				
				# read line by line from file /tmp/pacui-cache-downgrade-counted in while loop and save that line to variable $line
				while read -r line && [[ -n "$line" ]]
				do
					
					# attention, the following variables can be empty:
					temp1=$( echo $line | awk '{print $1}' )   # this variable is the no. of times a package has to be downgraded
					temp2=$( echo $line | awk '{print $2}' )   # this variable is the package name to be downgraded
					
					if [[ -n $temp2 ]]   # checks, if variable is not empty
					then
						# write list with all versions of package in cache into file /tmp/pacui-temp-downgrade (sorted - newest package version is on top)
						find $cache -name "${temp2}-[0-9]*[0-9a-z.-_]*.pkg.tar.[gx]z" | sort -r > /tmp/pacui-temp-downgrade
						
						# temp3 is supposed to be "2p" when temp1=1 and "3p" when temp1=2 ...  --> needed for "sed" command below
						temp3="$(( temp1 + 1 ))p"
						# the next line moves the $((temp3-1))-th version below the currently installed package version to file /tmp/pacui-downgrade. if no such old version is available, nothing happens.
						# this command determines the currently installed verions of package $temp2:  pacman -Q "$temp2" | awk '{print $2}'
						grep "$( pacman -Q "$temp2" | awk '{print $2}' )" -A 100 "/tmp/pacui-temp-downgrade" | sed -n "$temp3" >> /tmp/pacui-downgrade
					fi
				
				done < "/tmp/pacui-cache-downgrade-counted"	
				
				# write file into variable (otherwise, the "sudo pacman -U" command does not work)
				pkgD=$( cat /tmp/pacui-downgrade )
				
				# the following if-statement prevents the following error, in case there is no older package version available: "error: no targets specified (use -h for help)"
				if [[ -n $pkgD ]]   # checks, if variable is not empty
				then
					# downgrade packages by manually installing them: (sudo pacman -U --noconfirm --color always )
					sudo pacman -U $pkgD --color always --noconfirm
				fi
			
			fi
			
			
		fi
}


function func_d
{
		pacman -Slq > /tmp/pacui-packages-local
		pacman -Qq >> /tmp/pacui-packages-local
		
		local pkg
		pkg=$(sort -u /tmp/pacui-packages-local | fzf-tmux -m -e +s -i -1 --query="$input2" --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Press TAB to (un)select. Press ENTER to downgrade. Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed list of packages > ' | awk '{print $1}' )
		
		downgrade $pkg
}


function func_fix 
{
		echo "sudo rm -f /var/lib/pacman/db.lck ..."
		sudo rm -f /var/lib/pacman/db.lck
		echo ""
		
		echo "fixing mirrors ..."
		timeout 180 sudo pacman-mirrors -g && echo "" && sudo pacman -Syy
		echo ""

		# check, whether manjaro mirror with the latest packages is reachable
		wget --spider http://mirror.netzspielplatz.de/manjaro/
		echo ""
		# the "wget" command finishes with an exit status/return code. return code 0 means "wget --spider" has finished successfully, i.e. the manjaro mirror can be reached.
		if (( "$?" != "0" ))
		then
		
			# if the shell return code is not 0, this part of the code runs and the manjaro mirror cannot be reached.
			# run the following command in case the internet is working and only the manjaro mirror is down:
			sudo pacman -Syyuu --color always --noconfirm
			# display error message (ANSI Escape sequences will be explained later):
  			echo -e "\e[41m Either there is something wrong with your internet connection or http://mirror.netzspielplatz.de/manjaro is down. \e[0m"
			echo -e "\e[1;41m Please make sure both are ok and rerun this part of PacUI, if your Problems persist. \e[0m"
			echo ""
			
		else
		
			# the following command sometimes prevents an error connecting to the key server		
			echo "sudo dirmngr </dev/null ..."
			sudo dirmngr </dev/null
			echo ""
		
			#declare local variables (needed later)
			local {arch,version,url,mybranch}
			# store your architecture in "arch" variable (needed later)
			arch=$( uname -m )
			# extract the name of your used branch from your "/etc/pacman-mirrors.conf" file and store it in "mybranch" variable (needed later)
			mybranch=$( awk -F '=' '/^Branch/ {gsub(" ","",$2); print $2}' '/etc/pacman-mirrors.conf' )
                
				if [[ $(cat /proc/1/comm) == "systemd" ]]          # if init system is systemd
				then
					# set almost correct time (while ignoring time zone and daylight saving time):
					# 1. stop running NTPD service (and ignore output in case NTPD is not installed):
					echo "sudo systemctl stop ntpd.service ..."
					sudo systemctl stop ntpd.service &>/dev/null
					echo ""
					# 2. manually download and install networkmanager-dispatcher-ntpd:
						echo "installing networkmanager-dispatcher-ntpd ..."
						# extract the version number of networkmanager-dispatcher-ntpd in the Manjaro repositories and save it in "version" variable
						version="$( lang=C pacman -Si networkmanager-dispatcher-ntpd | awk -F ': ' '/^Version/ {print $2}' )"
						# save the address of the latest networkmanager-dispatcher-ntpd package on a reliable Manjaro mirror to "url" variable
						url="http://mirror.netzspielplatz.de/manjaro/packages/${mybranch}/community/${arch}/networkmanager-dispatcher-ntpd-${version}-any.pkg.tar.xz"
						wget "${url}" && sudo pacman -U "networkmanager-dispatcher-ntpd-${version}-any.pkg.tar.xz" --noconfirm
						echo ""
						sudo rm "networkmanager-dispatcher-ntpd-${version}-any.pkg.tar.xz"
						echo ""
					# 3. start NTP daemon, set the system clock, and quit
					# 4. wait for 20 seconds
					# 5. write the time from system clock to hardare clock
					sudo ntpd -qg && sleep 20 && sudo hwclock -w
					echo ""
				fi
				
				# remove gnupg including all keys
				echo "sudo rm -r /etc/pacman.d/gnupg ..."
				sudo rm -r /etc/pacman.d/gnupg &>/dev/null
				echo ""
				
				# manually download and install gnupg:
				echo "installing gnupg ..."
				version="$( lang=C pacman -Si gnupg | awk -F': ' '/^Version/ {print $2}' )"
				url="http://mirror.netzspielplatz.de/manjaro/packages/${mybranch}/core/${arch}/gnupg-${version}-${arch}.pkg.tar.xz"
				wget "${url}" && sudo pacman -U "gnupg-${version}-${arch}.pkg.tar.xz" --noconfirm && sudo rm "gnupg-${version}-${arch}.pkg.tar.xz"
				echo ""
				
				# manually download and install archlinux-keyring:
				echo "installing archlinux-keyring ..."
				version="$( lang=C pacman -Si archlinux-keyring | awk -F': ' '/^Version/ {print $2}' )"
				url="http://mirror.netzspielplatz.de/manjaro/packages/${mybranch}/core/${arch}/archlinux-keyring-${version}-any.pkg.tar.xz"
				wget "${url}" && sudo pacman -U "archlinux-keyring-${version}-any.pkg.tar.xz" --noconfirm && sudo rm "archlinux-keyring-${version}-any.pkg.tar.xz"
				echo ""
				
				# manually download and install manjaro-keyring:
				echo "installing manjaro-keyring ..."
				version="$( lang=C pacman -Si manjaro-keyring | awk -F': ' '/^Version/ {print $2}' )"
				url="http://mirror.netzspielplatz.de/manjaro/packages/${mybranch}/core/${arch}/manjaro-keyring-${version}-any.pkg.tar.xz"
				wget "${url}" && sudo pacman -U "manjaro-keyring-${version}-any.pkg.tar.xz" --noconfirm && sudo rm "manjaro-keyring-${version}-any.pkg.tar.xz"
				echo ""

			echo "sudo pacman-key --init ..."
			sudo pacman-key --init && echo "" && echo "sudo pacman-key --populate archlinux manjaro ..." && sudo pacman-key --populate archlinux manjaro
			echo ""
			
			#automatically trust all keys from arch linux trusted users and manjaro developers - both for packages from the repositories and packages fom the AUR:
			local temp
			temp=$( grep "/etc/pacman.d/gnupg/pubring.gpg" $HOME/.gnupg/gpg.conf )
			if [[ -n $temp ]]   # check, whether $temp variable is empty
			then
				# there are 2 different places on system for keys to be stored. move all keys for pacman to your private collection of keys. this collection is needed when installling packages from the AUR, e.g. for verifying who signed the package.
				echo "keyring /etc/pacman.d/gnupg/pubring.gpg" >> $HOME/.gnupg/gpg.conf
			fi			

			echo "sudo pacman -Sc --noconfirm ..."
			sudo pacman -Sc --noconfirm
			echo ""
			
			if [[ $(cat /proc/1/comm) == "systemd" ]]          # if init system is systemd
			then
				echo "updating systemd ..."
				sudo pacman -S --needed --noconfirm libsystemd systemd-sysvcompat systemd && sleep 30
				echo ""
			fi
			
			echo "updating system ..."
			sudo pacman -Syyuu --color always --noconfirm
			echo ""
			sudo pacman -Suu --color always
			echo ""
			sudo pacman -Fyy
		
		fi
}


function func_conf 
{
		# create file, which will contain a list of strings
		touch /tmp/pacui-conf
        
		# if file /etc/default/tlp exists, push string "/etc/default/tlp              - Configure power management." into /tmp/pacui-conf file.
		[[ -e /etc/default/tlp ]]                  && echo "/etc/default/tlp                - Configure power management." >> /tmp/pacui-conf
		[[ -e /etc/default/cpupower ]]             && echo "/etc/default/cpupower           - Configure CPU power management." >> /tmp/pacui-conf
		[[ -e /etc/profile.d/freetype2.sh ]]       && echo "/etc/profile.d/freetype2.sh     - Configure TrueType interpreter, including Infinality mode." >> /tmp/pacui-conf
		[[ -e /etc/pulse/daemon.conf ]]            && echo "/etc/pulse/daemon.conf          - Configure PulseAudio daemon." >> /tmp/pacui-conf
		[[ -e /etc/pacman.conf ]]                  && echo "\e[31m/etc/pacman.conf                - Configure Pacman.\e[0m" >> /tmp/pacui-conf
		[[ -e /etc/pacman-mirrors.conf ]]          && echo "/etc/pacman-mirrors.conf        - Configure Manjaro's pacman-mirrors." >> /tmp/pacui-conf
		[[ -e /etc/pacman.d/mirrorlist ]]          && echo "/etc/pacman.d/mirrorlist        - Configure mirror list manually." >> /tmp/pacui-conf
		[[ -e /etc/yaourtrc ]]                     && echo "/etc/yaourtrc                   - Configure Yaourt." >> /tmp/pacui-conf
		[[ -e /etc/xdg/pacaur/config ]]            && echo "/etc/xdg/pacaur/config          - Configure Pacaur." >> /tmp/pacui-conf
		[[ -e /etc/makepkg.conf ]]                 && echo "/etc/makepkg.conf               - Configure package compilation." >> /tmp/pacui-conf
		[[ -e /etc/resolv.conf ]]                  && echo "/etc/resolv.conf                - Configure DNS servers." >> /tmp/pacui-conf
		[[ -e /etc/hostname ]]                     && echo "/etc/hostname                   - Configure your network hostname" >> /tmp/pacui-conf
		[[ -e /etc/hosts ]]                        && echo "/etc/hosts                      - Configure local DNS." >> /tmp/pacui-conf
		[[ -e /etc/environment ]]                  && echo "/etc/environment                - Configure system-wide environment variables." >> /tmp/pacui-conf
		[[ -e /etc/slim.conf ]]                    && echo "/etc/slim.conf                  - Configure slim display manager." >> /tmp/pacui-conf
		[[ -e /etc/lightdm.conf ]]                 && echo "/etc/lightdm.conf               - Configure lightdm display manager." >> /tmp/pacui-conf
		[[ -e /etc/sddm.conf ]]                    && echo "/etc/sddm.conf                  - Configure sddm display manager." >> /tmp/pacui-conf
		[[ -e /etc/mdm/mdm.conf ]]                 && echo "/etc/mdm/mdm.conf               - Configure mdm display manager." >> /tmp/pacui-conf
		[[ -e /etc/lxdm/lxdm.conf ]]               && echo "/etc/lxdm/lxdm.conf             - Configure lxdm display manager." >> /tmp/pacui-conf
		[[ -e /etc/gdm/custom.conf ]]              && echo "/etc/gdm/custom.conf            - Configure gdm display manager." >> /tmp/pacui-conf
		[[ -e /etc/entrance/entrance.conf ]]       && echo "/etc/entrance/entrance.conf     - Configure entrance display manager." >> /tmp/pacui-conf
		[[ -e /etc/conf.d/xdm ]]                   && echo "/etc/conf.d/xdm                 - Configure xdm display manager." >> /tmp/pacui-conf
		[[ -e $HOME/.bashrc ]]                     && echo "~/.bashrc                       - Configure bash shell." >> /tmp/pacui-conf
		[[ -e $HOME/.zshrc ]]                      && echo "~/.zshrc                        - Configure zsh shell." >> /tmp/pacui-conf
		[[ -e $HOME/.config/fish ]]                && echo "~/.config/fish/*                - Configure fish shell." >> /tmp/pacui-conf
		[[ -e $HOME/.xinitrc ]]                    && echo "\e[31m~/.xinitrc                      - Configure X server startup.\e[0m" >> /tmp/pacui-conf
		[[ -e /etc/fstab ]]                        && echo "\e[31m/etc/fstab                      - Configure file system mount table.\e[0m" >> /tmp/pacui-conf
		[[ -e /etc/crypttab ]]                     && echo "\e[31m/etc/crypttab                   - Configure encrypted file system mount table.\e[0m" >> /tmp/pacui-conf
		[[ -e /etc/sudoers ]]                      && echo "\e[31m/etc/sudoers                    - Configure sudo.\e[0m" >> /tmp/pacui-conf		
		[[ -e /etc/systemd/logind.conf ]]          && echo "/etc/systemd/logind.conf        - Configure systemd user logins." >> /tmp/pacui-conf
		[[ -e /etc/systemd/journald.conf ]]        && echo "/etc/systemd/journald.conf      - Configure systemd logging." >> /tmp/pacui-conf
		[[ -e /etc/systemd/coredump.conf ]]        && echo "/etc/systemd/coredump.conf      - Configure systemd coredumps." >> /tmp/pacui-conf
		[[ -e /etc/systemd/system.conf ]]          && echo "/etc/systemd/system.conf        - Configure systemd system." >> /tmp/pacui-conf
		[[ -e /usr/lib/systemd/system  ]]          && echo "/usr/lib/systemd/system/*.timer - Configure all systemd timers." >> /tmp/pacui-conf
		[[ -e /etc/X11/xorg.conf.d ]]              && echo "/etc/X11/xorg.conf.d/*          - Configure Xorg display server in multiple files." >> /tmp/pacui-conf
		[[ -e $HOME/.config/weston.ini ]]          && echo "~/.config/weston.ini            - Configure Weston compositor." >> /tmp/pacui-conf
		[[ -e /etc/sysctl.d ]]                     && echo "/etc/sysctl.d/*                 - Configure kernel parameters at runtime in multiple files." >> /tmp/pacui-conf
		[[ -e /etc/mkinitcpio.conf ]]              && echo "\e[31m/etc/mkinitcpio.conf            - Configure initial ramdisk environment.\e[0m" >> /tmp/pacui-conf
		[[ -e /etc/default/grub ]]                 && echo "\e[31m/etc/default/grub               - Configure GRUB boot loader.\e[0m" >> /tmp/pacui-conf
		[[ -e /boot/loader/entries/manjaro.conf ]] && echo "\e[31m/boot/loader/entries/manjaro.conf    - Configure systemd-boot boot loader.\e[0m" >> /tmp/pacui-conf
		[[ -e /boot/refind_linux.conf ]]           && echo "\e[31m/boot/refind_linux.conf         - Configure rEFInd boot loader.\e[0m" >> /tmp/pacui-conf
		[[ -e /boot/EFI/refind/refind.conf ]]      && echo "\e[31m/boot/EFI/refind/refind.conf    - Configure rEFInd boot loader.\e[0m" >> /tmp/pacui-conf
		[[ -e /boot/EFI/CLOVER/config.plist ]]     && echo "\e[31m/boot/EFI/CLOVER/config.plist   - Configure Clover boot loader.\e[0m" >> /tmp/pacui-conf
		[[ -e /boot/syslinux/syslinux.cfg ]]       && echo "\e[31m/boot/syslinux/syslinux.cfg     - Configure syslinux boot loaders.\e[0m" >> /tmp/pacui-conf
		
		local file

		# echo -e "$( cat '/tmp/pacui-conf' )"  -- this command interprets the ANSI escape sequences contained in /tmp/pacui-conf.
		file=$( echo -e "$( cat '/tmp/pacui-conf' )" | fzf-tmux -e +s -i -1 --ansi --cycle --query="$input2" --reverse --margin=4%,1%,1%,2% --inline-info --header="Press ENTER to open file. Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed list of files > ' | awk '{print $1}' )
		
		# only run the command inside the if-statement, if $file variable is not empty <-- this happens when fzf is quit with ESC or CTRL+C
		if [[ -n $file ]]
		then
			if [[ $( echo $file | cut -c1 ) == "~" ]]
			# if "file"'s first character is a "~" (tilde), the "file" should NOT be opened as root!
			then
				# if $EDITOR variable does not exist, set it to 'nano'
				[[ -z "$EDITOR" ]] && EDITOR='nano'
				# open "file" in "EDITOR": (attention: "$file" (including " symbols) does NOT WORK!!!)
				$EDITOR $file
			elif [[ $file == "/etc/sudoers" ]]
			then
				# the sudoers file should never be edited directly! if something goes wrong, sudo stops working. instead, visudo should be used. this is much safer.
				sudo EDITOR=nano visudo
			elif [[ $file == "/etc/pacman.d/mirrorlist" ]]
			then
				# if $EDITOR variable does not exist, set it to 'nano'
				[[ -z "$EDITOR" ]] && EDITOR='nano'
				# open "file" in "EDITOR": (attention: "$file" (including " symbols) does NOT WORK!!!)
				sudo $EDITOR $file
				sudo pacman -Syy                                                     # apply changes
			elif [[ $file == "/etc/mkinitcpio.conf" ]]
			then
				[[ -z "$EDITOR" ]] && EDITOR='nano'
				sudo $EDITOR $file
				sudo mkinitcpio -P && sudo grub-mkconfig -o /boot/grub/grub.cfg      # apply changes   # "grub-mkconfig -o /boot/grub/grub.cfg" == "udpate-grub" (in manjaro)
			elif [[ $file == "/etc/default/grub" ]]
			then
				[[ -z "$EDITOR" ]] && EDITOR='nano'
				sudo $EDITOR $file
				sudo grub-mkconfig -o /boot/grub/grub.cfg                            # apply changes   # "grub-mkconfig -o /boot/grub/grub.cfg" == "udpate-grub" (in manjaro)
			else
				[[ -z "$EDITOR" ]] && EDITOR='nano'
				sudo $EDITOR $file
			fi
		fi
		rm /tmp/pacui-conf
}



function func_fu 
{
		sudo pacman -Syu --force --color always
}


function func_e 
{
		if [[ ! -e /usr/bin/pacaur ]]	             # checks, whether file "pacaur" does not exist
		then
			yaourt -Scc
		else
			pacaur -Scc --color always
		fi
}


function func_fi 
{
		# check, whether file /tmp/pacui-packages-group-manjaro already exists (the ! negates the result)
		if ! [[ -e /tmp/pacui-packages-group-manjaro ]]
		then
			# write formatted package list of Manjaro repositories to /tmp/pacui-packages-group-manjaro. then add all package groups to the bottom.
			package-query -Sl -f "%n  %v  -  %d" > /tmp/pacui-packages-group-manjaro
			pacman -Sg >> /tmp/pacui-packages-group-manjaro
		fi
		
		local pkg
		pkg=$( sort /tmp/pacui-packages-group-manjaro | fzf-tmux -m -e +s -i -1 --query="$input2" --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Press TAB to (un)select. Press ENTER to install. Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed list of packages > ' | awk '{print $1}' )
		
		if [[ -n $pkg ]]
		then
			sudo pacman -S --force $pkg --color always
		fi
}


function func_fr 
{
		# write formatted package list of local repository to /tmp/pacui-packages-group. then add all package groups to the bottom (this makes it easier to remove package groups - if a package group with non-installed packages gets selected, an error is the output).
		package-query -Q -f "%n  %v  -  %d" > /tmp/pacui-packages-group
		pacman -Sg >> /tmp/pacui-packages-group
		
		local pkg
		pkg=$( sort -u /tmp/pacui-packages-group | fzf-tmux -m -e +s -i -1 --query="$input2" --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Press TAB to (un)select. Press ENTER to remove. Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed list of packages > ' | awk '{print $1}' )
		
		if [[ -n $pkg ]]
		then
			sudo pacman -Rdd $pkg --color always
		fi
}


# =======================


function func_ua 
{
		if [[ ! -e /usr/bin/pacaur ]]	          # checks, whether file "pacaur" does not exist
		then
			yaourt -Syua && yaourt -Syua --devel --needed --noconfirm
		else
			pacaur -Syua --color always && pacaur -Syua --devel --needed --color always
		fi		
}


function func_la 
{
		pacman -Qem --color always
}


function func_a 
{
		local pkg
		
		if [[ -n "$input2" ]]
		then
		
			if [[ ! -e /usr/bin/pacaur ]]	      # checks, whether file "pacaur" does not exist
			then
				# do this if variable "input" is not empty:
				yaourt "$input2"
			else
				pacaur -Ss "$input2" --color always
			fi				
				
		else
			
			# do this if pacui is used with UI or no argument is specified in "pacui a" command:
			echo "Enter (parts of) name and/or description of package to be searched. Then press ENTER."
			read -r pkg
            
			if [[ ! -e /usr/bin/pacaur ]]	      # checks, whether file "pacaur" does not exist
			then
				yaourt $pkg
			else
				pacaur -Ss $pkg --color always
			fi
			
		fi
}



function func_h
{
		# the "then" part is displayed, when started directly from terminal (the last function adds the "1" parameter). the "else" part gets displayed when started from UI.
		if [[ "$1" == "1" ]]
		then

			echo
			echo -e "  pacui	      - \e[1mPacUI\e[0m with User Interface"
			echo
			echo -e "  pacui	u     - \e[1mU\e[0mpdate System"
			echo -e "  pacui	c     - \e[1mC\e[0mlean System"
			echo -e "  pacui	i     - \e[1mI\e[0mnstall Packages"
			echo -e "  pacui	r     - \e[1mR\e[0memove Packages + Deps"
			echo -e "  pacui	info  - Package \e[1mInfo\e[0mrmation"
			echo -e "  pacui	l     - \e[1mL\e[0mist Package Files"
			echo -e "  pacui	t     - Dependency \e[1mT\e[0mree"
			echo -e "  pacui	rt    - \e[1mR\e[0meverse Dependency \e[1mT\e[0mree"
			echo
			echo -e "  pacui	log   - Pacman \e[1mLog\e[0m"
			echo -e "  pacui	s     - \e[1mS\e[0mearch Package Files"
			echo -e "  pacui	b     - Roll \e[1mB\e[0mack System"
			echo -e "  pacui	d     - \e[1mD\e[0mowngrade Packages"
			echo -e "  pacui	fix   - \e[1mFix\e[0m Pacman Errors"
			echo -e "  pacui	conf  - \e[1mConf\e[0migure System"
			echo -e "  \e[31mpacui	fu    \e[0m- \e[1mF\e[0morce \e[1mU\e[0mpdate System"
			echo -e "  \e[31mpacui	e     \e[0m- \e[1mE\e[0mmpty Package Cache"
			echo -e "  \e[31mpacui	fi    \e[0m- \e[1mF\e[0morce \e[1mI\e[0mnstall Packages"
			echo -e "  \e[31mpacui	fr    \e[0m- \e[1mF\e[0morce \e[1mR\e[0memove Packages"
			echo
			echo -e "  pacui	ua    - Force \e[1mU\e[0mpdate \e[1mA\e[0mUR"
			echo -e "  pacui	la    - \e[1mL\e[0mist Installed from \e[1mA\e[0mUR"
			echo -e "  pacui	a     - Search + Install from \e[1mA\e[0mUR"
			echo
			echo -e "  pacui	h     - \e[1mH\e[0melp. For detailed help, please start User Interface first."
			
		else
			
			# this "heredoc" command pushes all the following lines into "cat" (and "cat pushed it to file /tmp/pacui-help) until a line with "EOF" is encountered
			cat > /tmp/pacui-help <<- "EOF"

\e[1mWelcome to PacUIs Help Page

PacUI is an interactive package manager for your command line terminal. It provides an easy user interface and uses Pacman and Pacaur/Yaourt as back ends. If Pacaur is installed on your system, PacUI uses it by default. PacUI offers you the most common and useful features for managing your packages.

Navigate this help page with your Arrow Keys, PageUp/PageDown Keys, SpaceBar, or your Mouse Wheel. To search this Help Page, enter /<SEARCH TERM> and press ENTER. For example, enter the following (without quotes " ") in order to search for the word "update": "/update". Search is not case sensitive. To exit this Help Page, press your "q" key.
Most options in PacUI use fuzzy finder (fzf), which means by starting to type you can search the displayed list. Advanced users can even use regular expressions to search in fzf. Use your TAB key to select multiple items from the list and your ENTER key to choose your selection. Navigate fzf's list the same way you navigate this help page.


\e[1mHOME SCREEN
PacUI's home screen is split into three parts:
The first part focuses on updates, maintenance, installations, and removals of packages from Manjaros repositories. It includes useful tools for these actions, too.
The second part includes options for fixing your system. Options, which can break your system, are marked in red.
The last part offers Arch User Repository (AUR) management options.


\e[1m00 - HELP
Display this help page. 
This help page only gets displayed when entered from PacUIs UI. If "pacui h" or "pacui -h" is executed in a terminal, a very short help page gets displayed. Quit this help page by pressing the "q" key.


\e[1m0 - QUIT PacUI
\e[36m"clear && exit"
This will clear your terminal an quit PacUI.


\e[1m1 - UPDATE SYSTEM
\e[36m"sudo pacman -Syu"
\e[36m"yaourt -Syua"
The first command compares a list of all installed packages with package database on your Manjaro repository mirror/server. If an updated package is available from the Manjaro repositories, it will get downloaded and installed on your system.
The second command does the same as the first part, but with one exception: It also downloads, compiles, and installs all packages from the Arch User Repository (AUR), which have an updated PKGBUILD file. The first command is still needed occasionaly, because major Pacman and Yaourt updates require "pacman -Syu" and will fail when started with Yaourt.
\e[1mAttention\e[0m: When a new version of an AUR package is available, sometimes the PKGBUILD file is not updated. If you want to install the latest version of a single AUR package, (re-)install it with INSTALL PACKAGES. If you want to install the latest versions of ALL AUR packages use FORCE UPDATE AUR.


\e[1m2 - CLEAN SYSTEM
\e[36m"timeout 60 sudo pacman-mirrors -g && sudo pacman -Syy"
This command tests your ping to 15 available and updated Manjaro repository mirrors/servers. The mirror with the best connection is automatically chosen for you. Additionally, the latest package database is downloaded from the chosen Manjaro repository mirror.

\e[36m"yaourt -Qdt"
This option lists all orphaned packages on your system. Orphaned packages are old and no longer needed dependencies (packages not explicitly installed by you), which were never removed from your system.

\e[36m"pacman -Dk"
This command checks your local package repository for consistency and shows missing packages, dependencies, or other errors. Please refer to "man pacman" for a more detailed explanation.

\e[36m"sudo pacdiff"
A .pacnew file may be created during a package upgrade to avoid overwriting a file (e.g. a config file) which already exists and was previously modified by the user. A .pacsave file may be created during a package removal, or by a package installation (the package must be removed first). When the pacman database has record that a certain file owned by the package should be backed up it will create a .pacsave file. These files require manual intervention from the user and it is good practice to handle them regularly. If left unhandled, improper configurations can result in improper function of the software, or the software being unable to run altogether. 
This command offers you a choice, whether you want to keep the original file (in most cases, these are config files) or the .pacnew/.pacsave file. Simply view both files by choosing "v". 
If you keep the original file, the program could not recognize the old syntax anymore, because it uses now a new syntax. In the worst case, your program could brake or stop working. If you remove the original file and use the new file without any changes, all your configurations might be reset to the default values. 
In most cases, the syntax does not change and you can simply remove the new file (with the default configuration settings).
If you notice a syntax change, it is highly recommended to solve this conflict in another way (e.g. by manually editing one of those files and deleting the other).
\e[1mAttention\e[0m: This command requires a default file difference viewer by setting the environment variable DIFFPROG. If this varialbe is not set, a minimal default is provided by PacUI using "diff".

\e[36m"sudo journalctl --vacuum-size=50M --vacuum-time=30days"
This command limits all log files in journalctl to a combined size of 50 megabytes and a maximum age of 30 days. This leaves plenty of log files behind to analyze systematic and reoccuring errors while preventing excessive amounts of log files.

\e[36m"paccache -ruvk1"
\e[36m"paccache -rvk2"
By default Pacman uses this cache directory for downloading packages: /var/cache/pacman/pkg/... . No cached packages get deleted automatically. This enables you to DOWNGRADE PACKAGES, which are broken, without a working internet connection. The package cache of an old and actively used Manjaro installation can become quite large. Clean it to regain space on your root partition.
The first command removes all packages from cache, which are not installed (anymore) on your system, except the latest version. 
The second command removes all old packages from your cache except the 2 latest versions: The version you have currently installed on your system and the previous version. Old package versions are kept to enable you to manually DOWNGRADE PACKAGES even without a working internet connection.

\e[36m"sudo pacman-optimize" \e[0m(only when Manjaro is installed on a HDD)
This command effectively defragments your Pacman database.
On traditional hard drives (HDD) this command can speed up all actions related to Pacman. 
\e[1mAttention\e[0m: It is NOT recommended to use this command on modern solid state hard drives (SSDs)!


\e[1m3 - INSTALL PACKAGES
\e[36m"sudo pacman -S <PACKAGE NAME>" \e[0m(if <PACKAGE NAME> is in Manjaro repository)
\e[36m"yaourt -S <PACKAGE NAME>" \e[0m(if <PACKAGE NAME> is in the AUR)
This option downloads and installs <PACKAGE NAME> on your system. The list of packages shows packages from the Manjaro repository with their version number and description while package groups or packages from the AUR are only shown with their name.
\e[1mAttention\e[0m: Experienced users can install packages from the AUR without the need to answer questions all the time by using the command "yaourt -S <PACKAGE NAME> --noconfirm". The "--noconfirm" flag is great for quick and dirty installations of AUR packages on non-secure systems. Please keep always in mind that the AUR can contain any sort of package - including malicious and destructive (parts of) packages. Therefore, it is recommended to always check the PKGBUILD and .INSTALL file manually before installing a package from the AUR.


\e[1m4 - REMOVE PACKAGES + DEPS
\e[36m"sudo pacman -Rsn <PACKAGE NAME>"
This command removes <PACKAGE NAME> from your system including all dependencies, which are no longer needed by other packages. A copy of <PACKAGE NAME> will be kept in your package cache: Run CLEAN SYSTEM to remove it.
Please note that folders in your home (~) directory and created by the program <PACKAGE NAME> will not get removed from your system. Look for such folders in these places and remove them manually:
~/
~/.config/
~/.local/share/
\e[1mAttention\e[0m: If you want to display a list of all your installed packages (including their version number and description) use this PacUI option. Simply do not select <PACKAGE NAME> to be removed, but quit the list view with ESC or CTRL+C.


\e[1m5 - PACKAGE INFORMATION
\e[36m"yaourt -Sii <PACKAGE NAME>"\e[0m or \e[36m"yaourt -Qii <PACKAGE NAME>"
This command displays a lot of information about <PACKAGE NAME>. Different pieces of information get displayed depending on package source (Manjaro repository or AUR) and package state (installed or not installed).


\e[1m6 - LIST PACKAGE FILES
\e[36m"pacman -Ql <PACKAGE NAME>"
\e[36m"sudo pacman -Fyl <PACKAGE NAME>" \e[0m(only for packages not installed on your system)
These commands list all files contained in <PACKAGE NAME> including their path. The second command syncs the file database with the Manjaro repositories and then searches the file database for files, which get installed by <PACKAGE NAME>.
As a result, <MANJARO REPOSITORY>/<PACKAGE NAME> and the complete path to the files gets displayed. <MANJARO REPOSITORY> gets only displayed, if <PACKAGE NAME> is not installed on your system. 
Have you ever installed a program and did not know with which command it can be started/executed? Just look for files (and their names) in your /usr/bin/ directory using LIST PACKAGE FILES.
By default, the results are filtered for files located in usr/bin/, but you can enter any filter term you want to. Delete the default filter term with BACKSPACE to see a complete list of files of <PACKAGE NAME>. Please note that all selected lines (toggle selection with your TAB key) will get added to file /tmp/pacui-l.
\e[1mAttention\e[0m: On some systems, the file database has not been downloaded which results in an error message instead of search results from the Manjaro repositories. You can fix it by running "sudo pacman -Fyy" once and restarting LIST PACKAGE FILES.


\e[1m7 - DEPENDENCIES TREE
\e[36m"pactree -s <PACKAGE NAME>"\e[0m or \e[36m"pactree <PACKAGE NAME>"
This command will display a complete tree of all dependencies of <PACKAGE NAME>. <PACKAGE NAME> can be an installed package or a package from the Manjaro repositories. Dependencies are packages required by <PACKAGE NAME> in order to function. When you install <PACKAGE NAME>, all its dependencies get installed, too.
The first command gets used when <PACKAGE NAME> is not installed on your local system.
Please note that all selected lines (toggle selection with your TAB key) will get added to file /tmp/pacui-t.


\e[1m8 - REVERSE DEPENDENCIES TREE
\e[36m"pactree -r <PACKAGE NAME>"
This command will display a tree of installed packages, which depend on <PACKAGE NAME>. In other words: All displayed packages require <PACKAGE NAME> in order to function (properly). 
Use this command when you want to know why you cannot remove <PACKAGE NAME> from your system.
Please note that all selected lines (toggle selection with your TAB key) will get added to file /tmp/pacui-rt.


\e[1m9 - PACMAN LOG
\e[36m"tail -5000 /var/log/pacman.log"
The Pacman Log contains all updates, installations, and removals (also in the AUR) you have done. Whenever something breaks on your system (e.g. after an udpate), but you do not remember anymore which packages were changed recently (e.g. during the last update), take a look at your Pacman Log and find out. Then, DOWNGRADE PACKAGES, which you think might be broken.
This command displays the last 5000 lines of your Pacman Log and makes it searchable with fzf. Please note that all selected lines (toggle selection with your TAB key) will get added to file /tmp/pacui-log.


\e[1m10 - SEARCH PACKAGE FILES
\e[36m"pacman -Ql | grep <FILE NAME>"
\e[36m"sudo pacman -Fysx <FILE NAME>" \e[0m(only for packages not installed on your system)
In some situations, Pacman (e.g. during UPDATE SYSTEM) cannot find a file, for example a shared library. An error message is shown about <FILE NAME>. Use SEARCH PACKAGE FILES to find out, which package has installed <FILE NAME>. In most cases, you can fix the Pacman error by using one of the following options on that package: UPDATE SYSTEM, FORCE REMOVE PACKAGES and INSTALL PACKAGES, FORCE UPDATE SYSTEM, or DOWNGRADE PACKAGES.
The first command searches for <FILE NAME> in all your installed packages. <FILE NAME> can contain regular expressions.
The second command syncs the file database with the Manjaro repositories and then searches the file database for <FILE NAME>.
As a result, <MANJARO REPOSITORY>/<PACKAGE NAME> and the complete path to <FILE NAME> gets displayed using fzf. <MANJARO REPOSITORY> gets only displayed, if <PACKAGE NAME> is not installed on your system. Please note that all selected lines (toggle selection with your TAB key) will get added to file /tmp/pacui-s.
\e[1mAttention\e[0m: On some systems, the file database has not been downloaded which results in an error message instead of search results from the Manjaro repositories. You can fix it by running "sudo pacman -Fyy" once and restarting SEARCH PACKAGE FILES.


\e[1m11 - ROLL BACK SYSTEM
\e[36m"sudo pacman -Rdd <PACKAGE NAME> --noconfirm" \e[0m(only for installed packages)
\e[36m"sudo pacman -U <PACKAGE NAME> --noconfirm" \e[0m(only for removed packages: Installs latest version in Pacman cache)
\e[36m"sudo pacman -U <FILE NAME> --noconfirm" \e[0m(only for upgraded packages: Installs previous version from Pacman cache)
Manjaro uses a rolling release development model. This means ALL packages on your system continuously get updated to the latest version. Sometimes, things go wrong during UPDATE SYSTEM and you should roll back the last update.
This command shows you a list of all recent Pacman actions sorted by date. Please select all Pacman actions you want to roll back. Installed packages will be removed from your system, removed packages will be reinstalled, and upgraded packages will be downgraded to the previous version (if this version is available in your local package cache). If you select multiple upgrades of the same package, the package gets downgraded multiple times (if this version is available in your local package cache).
\e[1mAttention\e[0m: After downgrading a broken package to a working version, it is recommended to add the package name to your Ignore List ( "IgnorePkg" option in /etc/pacman.conf ). This will prevent Pacman from showing any available updates for this package. The package needs to be removed manually from your Ignore List in order to receive automatic updates  for it again. Alternatively, you can run future updates with the command "sudo pacman -Syu --ignore <PACKAGE NAME>" until a fixed version of that package gets released.


\e[1m12 - FIX PACMAN ERRORS
Multiple commands attempt to fix the most common issues Manjaro users have with Pacman. Force options (as in FORCE UPDATE SYSTEM) are excluded, even though they are essential in fixing some problems.
A working internet connection is required.

\e[36m"sudo rm -f /var/lib/pacman/db.lck"
This command removes Pacmans database lock. The database lock prevents multiple Pacman instances from running at the same time and interfering with each other.
\e[1mAttention\e[0m: Only run this command when no other Pacman instance (e.g. Pacman, Yaourt, Pamac, Octopi, PacmanXG4, ...) is running.

\e[36m"timeout 180 sudo pacman-mirrors -g && sudo pacman -Syy"
The first command searches for working and good Manjaro repository mirrors/servers in all countries. It will automatically choose the closest server for you. This might not be the fastest mirror/server to download from, but it is definitely not a bad choice.
The second command forces a redownload of the latest package database from the chosen Manjaro repository mirror server. 
If you want to speed up this command, it is recommended to only test your connection quality to Manjaro mirrors/servers near you. Example: You have noticed the pings to German and French mirrors are always best for you. Then, you can run: "sudo pacman-mirrors -g -c Germany,France && sudo pacman -Syy". Alternatively, you can use the fasttrack argument and hope you get a good Manjaro mirror, e.g. "sudo pacman-mirrors -f 10 && sudo pacman -Syy".

\e[36m"sudo dirmngr </dev/null"
Sometimes during key management the package "dirmngr" outputs error messages, which interrupt key management processes (such as the following commands). This command prevents any output from "dirmngr".

\e[36m"sudo systemctl stop ntpd.service"
This command stops (temporarily) the Network Time Protocol daemon service NTPD (if it is installed and running). In case NTPD is not installed, the output is ignored.
This is the first command of a series of commands, which try to set the system and hardware clock on your computer (ignoring time zone and daylight saving time). An (almost) correct system time is needed for checking and importing keys or fingerprints later on in the fixing process!

\e[36m"sudo pacman -Sy networkmanager-dispatcher-ntpd"
This command (re-)installs the "networkmanager-dispatcher-ntpd" package. PacUI actually does not use this command but instead downloads and installs this package manually in order to bypass key database and key chain errors.
\e[1mAttention\e[0m: PacUI will fail if you cannot install any packages on your system anymore due to key database and key chain errors AND "networkmanager-dispatcher-ntpd" was not installed on your system before. As long as your system clock is set (almost) correct, you do not have to worry about it. But if your system clock is set completely wrong AND you cannot install any packages on your system anymore AND "networkmanager-dispatcher-ntpd" was not installed on your system before, your have to set your system clock manually before you run PacUIs "fix" command. You can do this with the following command:
sudo timedatectl set-time "yyyy-MM-dd hh:mm:ss"
( example: sudo timedatectl set-time "2016-05-26 11:13:54" )

\e[36m"sudo ntpd -qg && sleep 20 && sudo hwclock -w"
The first command starts the just (re-)installed Network Time Protocol daemon (ntpd.service). Next, your system clock is set. Finally, the ntpd.service is quit.
The second command makes your system wait for 20 seconds. This is done as precaution to ensure your system has enough time to connect to an internet or network server and set the system clock.
The third command is only run when the first and second command have been successfully finished. It writes the time from your system clock to your hardware clock.
\e[1mAttention\e[0m: The last command is needed in order to prevent another services on your system to set your system clock according to your hardware clock in regular intervals. This may result in a hardware clock, which is not set to UTC anymore and/or a system clock, which shows the wrong time. If you encounter this problem read the Arch Linux Wiki article about time: "https://wiki.archlinux.org/index.php/Time"

\e[36m"sudo rm -r /etc/pacman.d/gnupg"
This command deletes your Pacman, Manjaro, and Arch key database. It does not output an error in case the package "gnupg" is not installed on your system.
\e[1mAttention\e[0m: This command will remove all keys from your system, including manually installed keys (with "sudo pacman-key --lsign-key <KEY>"). Please remember to reinstall those keys again after FIX PACMAN ERRORS has completed!

\e[36m"sudo pacman -Sy gnupg archlinux-keyring manjaro-keyring"
This command (re-)installs the "gnupg", "archlinux-keyring", and "manjaro-keyring" packages and keyrings for Arch Linux and Manjaro. PacUI actually does not use this command but instead downloads and installs this package manually in order to bypass key database and key chain errors.
\e[1mAttention\e[0m: If you want to execute this command on a system with key database problems, it will not work for you! In this case, connect manually (via your browser) to your Manjaro repository server, download these packages, and install these packages manually. PacUI will do all of this automatically for you. If this part of PacUI fails, please wait a couple of hours until your Manjaro mirror has synchronized with the main Manjaro repository and offers the latest version of these 4 packages: networkmanager-dispatcher-ntpd,gnupg, archlinux-keyring, manjaro-keyring.

\e[36m"sudo pacman-key --init && sudo pacman-key --populate archlinux manjaro"
These two commands create a fresh key for you and import and (re-)install all keys from Arch Linux and Manjaro. This will solve problems with your local key database and Manjaro's and Arch's key database. Such problems can occur when new new Arch Linux or Manjaro packagers get added, for example.
\e[1mAttention\e[0m: This command might take a long time to complete. If your system appears to stop or hang, it searches for entropy in order to generate a new key for you. In this case, it might help to do file operations with a lot of reads and/or writes per minute (such as searching for files, copying large directories, etc.). Alternatively, you can open a browser and do some heavy surfing (with a lot of mouse movements, mouse klicks, and keyboard key presses): This can help to generate entropy much faster.

\e[36m"echo 'keyring /etc/pacman.d/gnupg/pubring.gpg' >> $HOME/.gnupg/gpg.conf"
There are 2 different places in Arch Linux and Manjaro to store keys: One place is used by pacman and the other gets used by GPG. 
This command imports all keys for pacman into GPG. This essentially means that the user trusts all Arch Linux Trusted Users and Manjaro Developers. After that, you will be able to install AUR packages from Arch Linus Trusted Users and Manjaro Developers without the need to import those keys manually.

\e[36m"sudo pacman -Sc"
After an unseccessful attempt to update your system (which quit with a key error), you might have already downloaded unsigned packages to your pacman cache. These packages cannot be installed anymore.
This command removes all packages from your pacman cache, which are not installed on your system. Afterwards, you need to download all previously downloaded but not installed packages again.
\e[1mAttention\e[0m: This command makes it impossible to DOWNGRADE PACKAGES on systems without an active internet connection.

\e[36m"sudo pacman -S --needed libsystemd systemd-sysvcompat systemd && sleep 30"
The first command updates - if necessary - systemd including important components before all other packages are updated. This is necessary, because sometimes a successful update of systemd causes a short crash on some systems, which prevents a successful update of all other packages.
The second command simply does nothing for 30 seconds before the update of all other packages get started. It is only here as precaution.

\e[36m"sudo pacman -Syyuu"
This last command forces a redownload of the latest package database from the best Manjaro repository mirror. Then, all your installed packages are checked against this latest package database. If an updated package is available from the Manjaro repositories, it will get downloaded and installed on your system. If an installed package is newer than the same package in the Manjaro repositories, the installed package will get downgraded. This behavior ensures your packages are always in sync with the Manajro repositories, even if you have just switched the Manjaro mirror or switched from unstable to stable branch.

\e[36m"sudo pacman -Suu"
This command makes abolutely sure all downloaded packages get installed and downgraded if necessary. The user has to manually allow downgrades of packages, if downgrades are available.

\e[36m"sudo pacman -Fyy"
This command forces a sync of the file database of the Manjaro repository with the chosen mirror. The file database is a separate from the package database. The file database enables SEARCH PACKAGE FILES and LIST PACKAGE FILES of packages from the Manjaro repository, which are not installed on your system.


\e[1m13 - CONFIGURE SYSTEM
\e[36m"$EDITOR <FILE NAME>"
This command opens <FILE NAME> in your default text editor. You can choose between multiple important system configuration files. Files in the root directory are opened with root privileges.
By default the text editor Nano gets used, except a custom $EDITOR variable has been exported. In the text editor Nano, Press CTRL+O to save your changes, ENTER to choose a directory, and CTRL+X to quit Nano.
\e[1mAttention\e[0m: Changing system configuration files can harm or even destroy your system. In some cases, this can happen with a single mistake. Be extremely careful and always double check your changes before saving and rebooting - especially when editing the files marked in red! It is recommended to search the Arch Wiki for the configuration file you want to edit and read about available and recommended settings.


\e[1;31m15 - FORCE UPDATE SYSTEM
\e[36m"sudo pacman -Syu --force"
This command does the same as UPDATE SYSTEM, but it bypasses file conflict tests and overwrites conflicting files. All files will be overwritten. 


\e[1;31m16 - EMPTY PACKAGE CACHE
\e[36m"yaourt -Scc"
This command will empty your entire package cache by deleting ALL packages.
\e[1mAttention\e[0m: This will make it impossible to reinstall old (or currently installed) packages or DOWNGRADE PACKAGES without a working internet connection.


\e[1;31m17 - FORCE INSTALL PACKAGES
\e[36m"sudo pacman -S --force <PACKAGE NAME>"
This command does the same as INSTALL PACKAGES, but it forces the installation of <PACKAGE NAME>.


\e[1;31m18 - FORCE REMOVE PACKAGES
\e[36m"pacman -Rdd <PACKAGE NAME>"
This command removes <PACKAGE NAME> without checking the dependencies of <PACKAGE NAME> first. This enables experienced users to remove packages and dependencies of packages. This command only removes <PACKAGE NAME> from your system. All dependencies and orphans are left: run CLEAN SYSTEM afterwards to remove them.
\e[1mAttention\e[0m: This command can break pacakges on your system or even your entire system.


\e[1m19 - FORCE UPDATE AUR
\e[36m"yaourt -Syua && yaourt -Syua --devel --needed --noconfirm"
The Arch User Repository (AUR) is a repository of (mostly) PKGBUILD files. Everybody can create such a PKGBUILD file and upload it to the AUR. A PKGBUILD file contains simple and human readable instructions like where to download the source code from, what dependencies are needed, where to copy files for installation, etc. Yaourt is a so called AUR Helper: It can interpret PKGBUILD files and download the source code, install dependencies, build files on your system, and copy these files to the right location (a.k.a. installing a program).
By checking a PKGBUILD file (and .INSTALL file) you can make sure the source code is loaded from an official download server, no harmful dependencies get installed, and the installation instructions do not contain harmful code.
A lot of PKGBUILD files contain variables (e.g. program version) in download addresses; this makes them download always the latest source code (e.g. from Github) during installation. Some PKGBUILD files contain no variables: These PKGBUILD files need to be changed manually every time a new program version is released.
The first command of FORCE UPDATE AUR does the same as the second command of UPDATE SYSTEM: Only AUR packages with updated/changed PKGBUILD files will get updated. This gives you the chance to check these updated/changed PKGBUILD files. 
The second command of FORCE UPDATE AUR forces a reinstall of ALL your developmental AUR packages (i.e. all git, svn, and cvs-packages). These kinds of AUR packages are usually never updated/reinstalled with a simple "yaourt -Syua". The "--noconfirm" flag is used in a secure way, because no PKGBUILD files have changed since the first command got executed.
\e[1mAttention\e[0m: This might take a long time! When using Yaourt, after every 15min this command will pause and ask again for your password.


\e[1m20 - LIST INSTALLED FROM AUR
\e[36m"pacman -Qem"
This command lists all installed packages, which are from the AUR or which were manually installed.
If you want a list of all installed packages use REMOVE PACKAGES + DEPS as described in this Help Page.


\e[1mDOWNGRADE PACKAGES
\e[36m"downgrade <PACKAGE NAME>"
Manjaro uses a rolling release development model. This means ALL packages on your system continuously get updated to the latest version. If the latest version of a packages does not work on your system, you can downgrade that package to an earlier, working version.
This command downgrades <PACKAGE NAME> and offers you a list of old <PACKAGE NAME> versions to choose from. This list includes all old <PACKAGE NAME> versions from your local package cache and online sources (if you have a working internet connection). 
After a successful downgrade, you can add <PACKAGE NAME> to your Ignore List ( "IgnorePkg" option in /etc/pacman.conf ). This will prevent Pacman from showing any available updates for <PACKAGE NAME>. <PACKAGE NAME> needs to be removed manually from your Ignore List in order to receive automatic updates of <PACKAGE NAME> again.
Alternatively, you can run future updates with the command "sudo pacman -Syu --ignore <PACKAGE NAME>" until a fixed version of <PACKAGE NAME> gets released.
\e[1mAttention\e[0m: Be careful when downgrading to <PACKAGE NAME> from online sources, because these are old versions from the Arch Linux repositories and not the Manjaro repositories: In the worst case, this can brake your system! Therefore, it is recommended to limit downgrading to (old versions of) local packages, if possible.
\e[1mAttention\e[0m: Downgrading to a working version of <PACKAGE NAME> can break your system in in rare cases like the following: The latest system update has replaced a dependency of <PACKAGE NAME> with a different package and <PACKAGE NAME> is an important system package. Downgrading <PACKAGE NAME> will NOT reinstall the dependency of <PACKAGE NAME>, because it conflicts with the already installled different package. This can result in a broken system. Please keep these kind of conflicts in mind when using DOWNGRADE PACKAGES.


\e[1mSEARCH + INSTALL FROM AUR
\e[36m"yaourt <PACKAGE NAME>"
This command searches for <PACKAGE NAME> in all Manjaro repositories and the Arch User Repository (AUR). It searches for package names and package descriptions. 
Example: You can search for "web browser" and you will find Firefox and other web browsers. One or multiple search results can be installed on your system.
If you want to exit this mode without installing any packages, simply press CTRL+C or ENTER.



Press "q" to quit this Help Page.


			EOF
			
			# display /tmp/pacui-help file in "less" and interpret all ANSI escape sequences in it (which only works with "echo -e ..."
			echo -e "$( cat '/tmp/pacui-help' )" | less -RMi
			
		fi
}


# all functions of pacui end here.

# =======================


# the following section of code gets executed when this script gets called directly from a terminal/tty without using the UI:


# write first argument of "pacui ..." (= option of pacui) to "input" variable.
input=$1
# wirte all other arguments of "pacui $1 ..." (= often (parts of) package or file names) to "input2" variable. all arguments gets combined into one variable with spaces, but no breaks. 
#fzf will always display search results for "input2", if it exists (and "input" is a valid function"). if "input2" is not found in fzf's list, NOTHING is displayed.
input2=${*:2}

# if "input" starts with a "-" or "--" dash symbol, the dash(es) gets removed from the beginnig of "input" variable
input=${input#-}
input=${input#-}

# convert content of "input" variable to lowercase
input=$(echo "$input" | tr '[:upper:]' '[:lower:]' )


# the following code checks, whether a prefix (func_) + varialbe "input" is a valid function defined above. after the function is done an "exit" command is needed to prevent the UI from loading.
if [[ $(type -t "func_$input") == "function" ]] 
then
		
		"func_$input" 1		# pass the parameter "1" with the funciton when it gets called directly from terminal.
		
		unset input
		unset input2
		
		exit $?			# exit here and return error code if present
		
elif (( $# > 0 ))		# if "func_$input" is no valid function AND if one or more arguments are given. this condition is needed to exclude "pacui" (without any arguments) from running this section.
then
		
		unset input
		unset input2
		
		# error, if $input does not refer to a valid function. the UI will be started by default.
		echo -e "Bad console command. Press ENTER to start PacUI or CTRL+C to abort."
		read
		# now, continue this script without exiting.
		
fi



# =======================
# =======================
# =======================



function pacui_clean 
{
		# the traditional "clear" command does not work as expected on all systems. solution: do everything i expect from "clear" manually:
		# number of lines of the user's terminal.
		lines=$( tput lines )
		for (( i=1; i<=lines; i++ ))
		do
				# insert "lines" number of empty lines:
				echo
		done
		# move cursor to the top left of the terminal
		tput cup 0 0
}


# ANSI Escape sequences:
#  \e[31m	# red text
#  \e[41m	# red background
#  \e[0m	# no-colored, non-bold text without background color
#  \e[1m	# bold text


# Run infinte loop for UI / menu, till the user quits.
while true
do
	
	pacui_clean
	
	# draw UI / menu. please note the use of ANSI Escape sequences mentioned above. The text/code can be hard to read...
	#echo
	echo -e "                      .:\e[7m PacUI - Package manager \e[0m:.                     "
	echo -e " ┌─────────────────────────────────────────────────────────────────────┐"
	echo -e " │    1   \e[1mU\e[0mpdate System                 2   \e[1mC\e[0mlean System               │"
	echo -e " │    3   \e[1mI\e[0mnstall Packages              4   \e[1mR\e[0memove Packages + Deps     │"
	echo -e " │---------------------------------------------------------------------│"
	echo -e " │    5   Package \e[1mInfo\e[0mrmation           6   \e[1mL\e[0mist Package Files         │"
	echo -e " │    7   Dependency \e[1mT\e[0mree               8   \e[1mR\e[0meverse Dependency \e[1mT\e[0mree    │"
	echo -e " └─────────────────────────────────────────────────────────────────────┘"
	echo -e "      9   Pacman \e[1mLog\e[0m                   10   \e[1mS\e[0mearch Package Files        "
	echo -e "     11   Roll \e[1mB\e[0mack System             12   \e[1mFix\e[0m Pacman Errors           "
	echo -e "     13   \e[1mConf\e[0migure System                                              "
	echo -e "   \e[31m  15   \e[1mF\e[0;31morce \e[1mU\e[0;31mpdate System          16   \e[1mE\e[0;31mmpty Package Cache       \e[0m "
	echo -e "   \e[31m  17   \e[1mF\e[0;31morce \e[1mI\e[0;31mnstall Packages       18   \e[1mF\e[0;31morce \e[1mR\e[0;31memove Packages     \e[0m "
	echo -e " ┌─────────────────────────────────────────────────────────────────────┐"
	echo -e " │   19   Force \e[1mU\e[0mpdate \e[1mA\e[0mUR             20   \e[1mL\e[0mist Installed from \e[1mA\e[0mUR    │"
	echo -e " └─────────────────────────────────────────────────────────────────────┘"
	echo
	echo -e "  Enter number or marked letter(s)   -   00   \e[1mH\e[0melp   -   0   \e[1mQ\e[0muit PacUI "
	
	# save entered number in varialbe "choice" and test, whether "choice" fits any of the following numbers, letters, or words
	read -r choice
	# convert "choice" variable to lowercase:
	choice=$(echo "$choice" | tr '[:upper:]' '[:lower:]' )
	echo
	
	case $choice in


		# this line means: the following commands will get executed if $choice is "1" or "u" or "update" until a ";;" code line is encountered:
		1|u|update)
			# call function "func_u"
			func_u
			echo
			echo -e " System updated. To return to PacUI press ENTER "
			# wait for input, e.g. by pressing ENTER
			read
			;;
		2|c|clean)
			func_c
			echo
			echo -e " System cleaned. To return to PacUI press ENTER "
			read
			;;
		3|i|install)
			func_i
			echo
			echo -e " Package installation finished. To return to PacUI press ENTER "
			read
			;;
		4|r|remove)
			func_r
			echo
			echo -e " Package(s) including all unneeded dependencies removed. To return to PacUI press ENTER "
			read
			;;
		5|info|information)
			func_info
			echo
			echo -e " Package information displayed. To return to PacUI press ENTER "
			read
			;;
		6|l|list)
			func_l
			echo
			;;
		7|t|tree)
			func_t
			echo
			echo -e " Dependency tree displayed. Navigate with SHIFT+PageUp. To return to PacUI press ENTER "
			read
			;;
		8|rt|reversetree)
			func_rt
			echo
			echo -e " Reverse dependency tree displayed. Navigate with SHIFT+PageUp. To return to PacUI press ENTER "
			read
			;;


		9|log)
			func_log
			echo
			;;		
		10|s|search)
			func_s
			echo
			;;
		11|b|back)
			func_b
			echo
			echo -e " System roll back finished. To return to PacUI press ENTER "
			read
			;;
		12|fix)
			func_fix
			echo
			echo -e " Operation finished. To return to PacUI press ENTER "
			read
			;;
		d|down|downgrade)
			func_d
			echo
			echo -e " Downgrade finished. To return to PacUI press ENTER "
			read
			;;
		13|conf|config|configure)
			func_conf
			echo
			;;
		15|fu|forceupdate)
			func_fu
			echo
			echo -e " System updated in force mode. To return to PacUI press ENTER "
			read
			;;
		16|e|empty)
			func_e
			echo
			echo -e " Entire package cache emptied. To return to PacUI press ENTER "
			read
			;;
		17|fi|forceinstall)
			func_fi
			echo
			echo -e " Package installation in force mode finished. To return to PacUI press ENTER "
			read
			;;
		18|fr|forceremove)
			func_fr
			echo
			echo -e " Package(s) removed in force mode. To return to PacUI press ENTER "
			read
			;;


		19|ua|fua|forceupdateaur|updateaur)
			func_ua
			echo
			echo -e " All AUR packages updated and reinstalled. To return to PacUI press ENTER "
			read
			;;
		20|la|listaur)
			func_la
			echo
			echo -e " All locally installed packages listed. To return to PacUI press ENTER "
			read
			;;
		a|aur)
			func_a
			echo
			echo -e " Installation from AUR finished. To return to PacUI press ENTER "
			read
			;;


		00|h|help)
			func_h
			echo
			;;
		0|q|quit|$'\e'|$'\e'$'\e')
			pacui_clean && exit
			;;


		*)
			echo -e " \e[41m Wrong option \e[0m"
			echo -e "  Wait and try again later..."
			sleep 2
			;;
            
	esac    # close case-loop
done        # close while-loop
