#!/bin/bash

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  =======================
#  Design based on IceFox script
#  Modified, adapted and improved by pekman and excalibur1234
#  fzf and Downgrade support added by Chrysostomus
#  Contact and suggestions: http://polr.me/pacli1



# all functions of pacli are defined here:


function func_u 
{
		sudo pacman -Syu --color always && yaourt -Syua
}


function func_c 
{
		sudo pacman-mirrors -g && sudo pacman -Syy --color always
		yaourt -Qdt
		paccache -ruvk0
		paccache -rvk2

		# 1. extract the name of hard drive the / partition is installed on and write it to the "disk" variatble"
		disk=$(lsblk -o "name,mountpoint" -pa | sed -n '/^\//h;/\/$/{g;p}' | cut -d/ -f3)
		disk="${disk:0:3}"
		# 2. check, whether "disk" is not empty and whether the path to "disk" exists
		if [[ -n "$disk" && -e "/dev/$disk" ]]
		then
			# open the "rotational" file belonging to your "disk" and checking, whether it contains a "1" - this means your "disk" is a traditional hard drive and no SSD.
			if [[ $(cat $(find "/sys" -name "rotational" 2>/dev/null | grep "$disk/queue")) == "1" ]]
			then
			# only execute the following line when your / parition is installed on a hard drive.
			sudo pacman-optimize
			fi
		fi
		
		unset disk
}


function func_i 
{
		# the "package-query -Sl -f '%n  %v  -  %d' " displays a list of all packages from the Manjaro repositories and formats them like "NAME  VERSION  -  DESCRIPTION".
		pkg=$(package-query -Sl -f "%n  %v  -  %d" | sort | fzf -m -e +s -i -0 --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Use TAB to toggle Selection. Cancel list selection with CTRL+C or ESC" --prompt='Search and select packages to install > ' | awk '{print $1}' )
		
		# only run the command inside the if-statement, if $pkg variable is not empty - this happens when fzf is quit with ESC or CTRL+C
		if [[ -n $pkg ]]
		then
			sudo pacman -S $pkg --color always
		fi		
		
		unset pkg
}


function func_r 
{
		# $(pacman -Qq | sort | fzf -e -m +s --reverse --prompt='Select packages to remove (use TAB to toggle selection) > ')
		# takes a package list from "pacman -Qq", then sorts it alphabetically, then make the resulting list available to fzf.
		# fzf lets you search and select the given list in a fast way. the "-m" flags makes it possible to select multiple list items.
		pkg=$(pacman -Qq | sort | fzf -m -e +s -i -0 --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Use TAB to toggle Selection. Cancel list selection with CTRL+C or ESC" --prompt='Search installed packages and select to remove > ')

		if [[ -n $pkg ]]
		then
			sudo pacman -Rsn $pkg --color always
		fi
		
		unset pkg
}


function func_info 
{
		# check, whether file /tmp/pacli-packages already exists (the ! negates the result)
		if ! [ -e /tmp/pacli-packages ]
		then
			# write package list of repositories to /tmp/pacli-packages. then, download AUR package list, unzip it to /tmp/aur/packages, and add it to the bottom of /tmp/pacli-packages.
			pacman -Slq > /tmp/pacli-packages
			wget -P /tmp/aur/ https://aur.archlinux.org/packages.gz >/dev/null 2>&1 && gunzip -f /tmp/aur/packages.gz && cat /tmp/aur/packages >> /tmp/pacli-packages
		fi
			
		# the following command lets you search through the file "/tmp/pacli-packages" with fzf and save your selection in "pkg"
		pkg=$(sort /tmp/pacli-packages | fzf -e +s -i -0 --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Cancel list selection with CTRL+C or ESC" --prompt='Search and select package > ')
		
		# only run the command inside the if-statement, if $pkg variable is not empty - this happens when fzf is quit with ESC or CTRL+C
		if [[ -n $pkg ]]
		then
			# next, it is checked, whether "pkg" is part of a list of all installed packages (pacman -Qq).
			if ( pacman -Qq $pkg &>/dev/null )
			then
				yaourt -Qii $pkg		# execute this command when "pkg" is already installed on system
			else
				yaourt -Sii $pkg		# execute this command when "pkg" is not installed on system
			fi
		fi
		
		unset pkg out
}


function func_l 
{
		# use fzf to ask the user to select an installed package. the package name gets save in variable "pkg"
		pkg=$(pacman -Qq | fzf -e +s -i -0 --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Cancel list selection with CTRL+C or ESC" --prompt='Search and select package > ')
		
		if [[ -n $pkg ]]
		then
			# take the output of command "pacman -Qlq $pkg" and make it searchable with fzf. for all used fzf flags see "man fzf". store all marked lines in file /tmp/pacli-list.
			pacman -Qlq $pkg --color always | fzf -m -e +s -i -q /usr/bin/ --reverse --margin=4%,1%,1%,1% --inline-info --header="List of files of package \"${pkg}\". Cancel lists selection with CTRL+C or ESC." --prompt='Enter one or more filter terms > ' >> /tmp/pacli-list
		fi
		
		unset pkg
}


function func_t 
{
		# write package list of Manjaro repositories to /tmp/pacli-packages-local. then add all instaled packages to the bottom of /tmp/pacli-packages-local.
		pacman -Slq > /tmp/pacli-packages-local
		pacman -Qq >> /tmp/pacli-packages-local

		pkg=$(sort /tmp/pacli-packages-local | fzf -e +s -i -0 --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Cancel list selection with CTRL+C or ESC" --prompt='Search and select package > ')
		
		# look in func_info for explanations
		if [[ -n $pkg ]]
		then
			if (pacman -Qq $pkg &>/dev/null)
			then
				pactree -c $pkg
			else
				pactree -c -s $pkg
			fi
		fi
		
		unset pkg
}


function func_rt 
{
		pkg=$(pacman -Qq | fzf -e +s -i -0 --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Cancel list selection with CTRL+C or ESC" --prompt='Search and select package > ')
		
		pactree -c -r $pkg
		
		unset pkg
}


# =======================


function func_log 
{
		tail -5000 /var/log/pacman.log | fzf -m -e +s -i -0 -q alpm --tac --reverse --margin=4%,1%,1%,1% --inline-info --header="Navigate with PageUp / PageDown Keys. Cancel lists selection with CTRL+C or ESC." --prompt='Enter one or more filter terms > ' >> /tmp/pacli-log
}


function func_d 
{
		pacman -Slq > /tmp/pacli-packages-local
		pacman -Qq >> /tmp/pacli-packages-local
		
		pkg=$(sort /tmp/pacli-packages-local | fzf -e +s -i -0 --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Cancel list selection with CTRL+C or ESC" --prompt='Search and select package to downgrade > ')
		
		downgrade $pkg
		
		unset pkg

}


function func_fix 
{
		sudo rm -f /var/lib/pacman/db.lck
		sudo pacman-mirrors -g && sudo pacman -Syy

		sudo rm -r /etc/pacman.d/gnupg &>/dev/null

		# manually download and install these packages: gnupg, archlinux-keyring, manjaro-keyring
		arch=$(uname -m)
		# extract the name of your used branch from your "/etc/pacman-mirrors.conf" file and store it in "mybranch" variable
		mybranch=$(awk -F'=' '/^Branch/ {print $2}' /etc/pacman-mirrors.conf)
		# extract the version number of gnupg in the Manjaro repositories and save it in "version" variable
		version="$(lang=C pacman -Si gnupg | awk -F':' ' /^Ver/ {print $2}' | sed 's# #-#' | head -n 1 )"
		# save the address of the latest gnupg package on a reliable Manjaro mirror to "url" variable
		url="http://mirror.netzspielplatz.de/manjaro/packages/${mybranch}/core/${arch}/gnupg${version}-${arch}.pkg.tar.xz"
		wget "${url}" && sudo pacman -U "gnupg${version}-${arch}.pkg.tar.xz" --noconfirm && sudo rm "gnupg${version}-${arch}.pkg.tar.xz"

		version="$(lang=C pacman -Si archlinux-keyring | awk -F':' ' /^Ver/ {print $2}' | sed 's# #-#' | head -n 1 )"
		url="http://mirror.netzspielplatz.de/manjaro/packages/${mybranch}/core/${arch}/archlinux-keyring${version}-any.pkg.tar.xz"
		wget "${url}" && sudo pacman -U "archlinux-keyring${version}-any.pkg.tar.xz" --noconfirm && sudo rm "archlinux-keyring${version}-any.pkg.tar.xz"

		version="$(lang=C pacman -Si manjaro-keyring | awk -F':' ' /^Ver/ {print $2}' | sed 's# #-#' | head -n 1 )"
		url="http://mirror.netzspielplatz.de/manjaro/packages/${mybranch}/core/${arch}/manjaro-keyring${version}-any.pkg.tar.xz"
		wget "${url}" && sudo pacman -U "manjaro-keyring${version}-any.pkg.tar.xz" --noconfirm && sudo rm "manjaro-keyring${version}-any.pkg.tar.xz"
		unset arch version url mybranch

		# the following command sometimes prevents an error connecting to the key server		
		sudo dirmngr </dev/null
		sudo pacman-key --init && sudo pacman-key --populate archlinux manjaro

		sudo pacman -Sc --noconfirm
		sudo pacman -Syyuu --color always --noconfirm
}


function func_fu 
{
		sudo pacman -Syu --force --color always
}


function func_empty 
{
		yaourt -Scc
}


function func_fi 
{
		pkg=$(package-query -Sl -f "%n  %v  -  %d" | sort | fzf -m -e +s -i -0 --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Use TAB to toggle Selection. Cancel list selection with CTRL+C or ESC" --prompt='Search and select packages to install > ' | awk '{print $1}' )
		
		if [[ -n $pkg ]]
		then
			sudo pacman -S --force $pkg --color always
		fi
		
		unset pkg
}


function func_fr 
{
		pkg=$(pacman -Qq | fzf -m -e +s -i -0 --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Use TAB to toggle Selection. Cancel list selection with CTRL+C or ESC" --prompt='Search installed packages and select to remove > ')
		
		if [[ -n $pkg ]]
		then
			sudo pacman -Rdd $pkg --color always
		fi
		
		unset pkg
}


# =======================


function func_ua 
{
		yaourt -Syua && yaourt -Syua --devel --needed --noconfirm
}


function func_a 
{
		echo "Enter name of package to be searched in the AUR and press [Enter] to continue"
		read -r pkg
		
		yaourt $pkg
		
		unset pkg
}


function func_ia 
{
		# check, whether file /tmp/pacli-packages already exists (the ! negates the result)
		if ! [ -e /tmp/pacli-packages ]
		then
			# write package list of manjaro repositories to /tmp/pacli-packages. then, download AUR package list, unzip it to /tmp/aur/packages, and add it to the bottom of /tmp/pacli-packages.
			pacman -Slq > /tmp/pacli-packages
			wget -P /tmp/aur/ https://aur.archlinux.org/packages.gz >/dev/null 2>&1 && gunzip -f /tmp/aur/packages.gz && cat /tmp/aur/packages >> /tmp/pacli-packages
		fi
			
		pkg=$(sort /tmp/pacli-packages | fzf -m -e +s -i -0 --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Use TAB to toggle Selection. Cancel list selection with CTRL+C or ESC" --prompt='Search and select packages to install > ')
		
		if [[ -n $pkg ]]
		then
			yaourt -S $pkg
		fi
		
		unset pkg
}


function func_la 
{
		pacman -Qem --color always
}


function func_h 
{
		# the "then" part is displayed, when started from terminal (the last function adds the "1" parameter). the "else" part gets displayed when started from UI.
		if [[ "$1" == '1' ]]
		then

			echo
			echo -e "  pacli	       - \e[1mPacli\e[0m with User Interface"
			echo
			echo -e "  pacli	u      - \e[1mU\e[0mpdate System"
			echo -e "  pacli	c      - \e[1mC\e[0mlean System"
			echo -e "  pacli	i      - \e[1mI\e[0mnstall Package"
			echo -e "  pacli	r      - \e[1mR\e[0memove Package + Deps"
			echo -e "  pacli	info   - Package \e[1mInfo\e[0mrmation"
			echo -e "  pacli	l      - \e[1mL\e[0mist Local Package Files"
			echo -e "  pacli	t      - Dependency \e[1mT\e[0mree"
			echo -e "  pacli	rt     - \e[1mR\e[0meverse Dependency \e[1mT\e[0mree"
			echo
			echo -e "  pacli	log    - Pacman \e[1mLog\e[0m"
			echo -e "  pacli	d      - \e[1mD\e[0mowngrade Packages"
			echo -e "  pacli	h      - \e[1mH\e[0melp. For detailed help, please start User Interface first."
			echo -e "  \e[31mpacli	fix    \e[0m- \e[1mFix\e[0m Errors"
			echo -e "  \e[31mpacli	fu     \e[0m- \e[1mF\e[0morce \e[1mU\e[0mpdate System"
			echo -e "  \e[31mpacli	empty  \e[0m- \e[1mEmpty\e[0m Package Cache"
			echo -e "  \e[31mpacli	fi     \e[0m- \e[1mF\e[0morce \e[1mI\e[0mnstall Package"
			echo -e "  \e[31mpacli	fr     \e[0m- \e[1mF\e[0morce \e[1mR\e[0memove Package"
			echo
			echo -e "  pacli	ua     - Force \e[1mU\e[0mpdate \e[1mA\e[0mUR"
			echo -e "  pacli	la     - \e[1mL\e[0mist Installed from \e[1mA\e[0mUR"
			echo -e "  pacli	a      - Search + Install from \e[1mA\e[0mUR"
			echo -e "  pacli	ia     - \e[1mI\e[0mnstall from \e[1mA\e[0mUR"
			echo
			
		else
		
			less 	<<-EOF

Welcome to Pacli's Help Page.

Pacli is an interactive package manager for your command line terminal. It provides an easy user interface and uses Pacman and Yaourt as back ends. Additionally, it uses some Manjaro exclusive commands. Pacli offers you the most common and useful features for managing your packages.
Navigate this help page with your Arrow Keys, PageUp/PageDown Keys, SpaceBar, or your Mouse Wheel.
Most options in Pacli use fuzzy finder (fzf), which means by starting to type you can search the displayed list. Use your TAB key to select multiple items from the list and your ENTER key to choose your selection. Navigate fzf's list the same way you navigate this help page.


HOME SCREEN
Pacli's home screen is split into three parts:
The first part focuses on updates, maintenance, installations, and removals of packages from Manjaro's repositories. It includes useful tools for these actions, too.
The second part includes advanced options for fixing your system. Options, which can break your system, are marked in red.
The last part offers Arch User Repository (AUR) management options.

0 - EXIT PACLI
"clear && exit"
This will clear your terminal and exit Pacli.

1 - UPDATE SYSTEM
"sudo pacman -Syu && yaourt -Syua"
The first command compares a list of all installed packages with package database on your Manjaro repository mirror/server. If an updated package is available from the Manjaro repositories, it will get downloaded and installed on your system.
The second command (only runs, if the first command was completed successfully and) does the same as the first, but with one exception: It also downloads, compiles, and installs all packages from the Arch User Repository (AUR), which have an updated PKGBUILD file. The first command is still needed, because major Pacman and Yaourt updates require "pacman -Syu" and will fail when executed with Yaourt.
ATTENTION: When a new version of an AUR package is available, often the PKGBUILD file is not updated. If you want to install the latest version of a single AUR package, (re-)install it with INSTALL FROM AUR. If you want to install the latest versions of ALL AUR packages FORCE UPDATE AUR.

2 - CLEAN SYSTEM
"sudo pacman-mirrors -g && sudo pacman -Syy"
This command tests your connection to all available Manjaro repository mirrors/servers. The mirror with the best connection is automatically chosen for you. Additionally, the latest package database is downloaded from the chosen Manjaro repository mirror.
If you want to speed up this command: Only test your connection quality to Manjaro mirrors/servers near you. Example: You have noticed the pings to German and French mirrors are always best for you. Then, you can run: "sudo pacman-mirrors -g -c Germany,France"

"yaourt -Qdt"
This option lists all orphaned packages on your system. Orphaned packages are old dependencies (packages not explicitly installed by you), which were never removed from your system.
Answer with "y" to remove all listed orphaned packages. Simply pressing [ENTER] will not remove the listed orphaned packages.

"paccache -ruvk0"
"paccache -rvk2"
By default Pacman uses this cache directory for downloading packages: /var/cache/pacman/pkg/... . No cached packages get deleted automatically. This enables you to DOWNGRADE PACKAGES, which are broken, without a working internet connection. The package cache of an old and actively used Manjaro installation can become quite large. Clean it to regain space on your root partition.
The first command removes all packages from cache, which are not installed (anymore) on your system. The second command removes all old packages from your cache except the 2 latest versions: The version you have currently installed on your system and the previous version.

"sudo pacman-optimize" (only when Manjaro is installed on a HDD)
This command effectively defragments your Pacman database.
On traditional hard drives (HDD) this command can speed up all actions related to Pacman. 
ATTENTION: It is NOT recommended to use this command on modern solid state hard drives (SSD)!

3 - INSTALL PACKAGE
"sudo pacman -S <PACKAGE NAME>"
This option downloads and installs <PACKAGE NAME> on your system. <PACKAGE NAME> must be a package from the Manjaro repositories.

4 - REMOVE PACKAGE + DEPS
"sudo pacman -Rsn <PACKAGE NAME>"
This command removes <PACKAGE NAME> from your system including all dependencies, which are no longer needed by other packages. A copy of <PACKAGE NAME> will be kept in your package cache: Run CLEAN SYSTEM to remove it.
Please note that folders in your home (~) directory and created by the program <PACKAGE NAME> will not get removed from your system. Look for such folders in these places and remove them manually:
~/
~/.config/
~/.local/share/

5 - PACKAGE INFORMATION
"yaourt -Sii <PACKAGE NAME>" or "yaourt -Qii <PACKAGE NAME>"
This command displays a lot of information about <PACKAGE NAME>. Different pieces of information get displayed depending on package source (Manjaro repository or AUR) and package state (installed or not installed).

6 - LIST LOCAL PACKAGE FILES
"pacman -Qlq <PACKAGE NAME>"
This command lists all files contained in <PACKAGE NAME> and their install directory. <PACKAGE NAME> must be installed on your system.
Have you ever installed a program and did not know with which command it can be started/executed? Just look for files (and their names) in your /usr/bin/ directory using LIST LOCAL PACKAGE FILES.
By default all files are filtered for files located in /usr/bin/, but you can enter any filter term you want to. Delete the default filter term with BACKSPACE to see a complete list of files of <PACKAGE NAME>. Please note that all selected lines (toggle selection with your TAB key) will get added to file /tmp/pacli-list.

7 - DEPENDENCIES TREE
"pactree -s <PACKAGE NAME>" or "pactree <PACKAGE NAME>"
This command will display a complete tree of all dependencies of <PACKAGE NAME>. <PACKAGE NAME> can be an installed package or a package from the Manjaro repositories. Dependencies are packages required by <PACKAGE NAME> in order to function. When you install <PACKAGE NAME>, all its dependencies get installed, too.
Depending whether <PACKAGE NAME> is installed on your local system, a different command gets used.

8 - REVERSE DEPENDENCIES TREE
"pactree -r <PACKAGE NAME>"
This command will display a tree of installed packages, which depend on <PACKAGE NAME>. In other words: All displayed packages require <PACKAGE NAME> in order to function (properly). 
Use this command when you want to know why you cannot remove <PACKAGE NAME> from your system.

9 - PACMAN LOG
"tail -5000 /var/log/pacman.log"
The Pacman Log contains all updates, installations, and removals (also in the AUR) you have done. Whenever something breaks on your system (e.g. after an udpate), but you do not remember anymore which packages were changed recently (e.g. during the update), take a look at your Pacman Log and find out. Then, DOWNGRADE PACKAGES, which you think might be broken.
This command displays the last 5000 lines of your Pacman Log and makes it searchable with fzf. Please note that all selected lines (toggle selection with your TAB key) will get added to file /tmp/pacli-log.

10 - DOWNGRADE PACKAGES
"downgrade <PACKAGE NAME>"
Manjaro uses a rolling release development model. This means ALL packages on your system continuously get updated to the latest version. If the latest version of a packages does not work on your system, you can downgrade that package to an earlier, working version.
This command downgrades <PACKAGE NAME> and offers you a list of old <PACKAGE NAME> versions to choose from. This list includes all old <PACKAGE NAME> versions from your package cache and online sources (if you have a working internet connection).
After a successful downgrade, you can add <PACKAGE NAME> to your ignore list. This will prevent Pacman from showing any available updates for <PACKAGE NAME>. Remove <PACKAGE NAME> from your ignore list with CONFIGURE PACMAN.
Alternatively, you can run future updates with the command "sudo pacman -Syu --ignore <PACKAGE NAME>" until a fixed version of <PACKAGE NAME> gets released.

11 - HELP
Display this help page.

12 - FIX ERRORS
Multiple commands attempt to fix the most common issues Manjaro users have with Pacman:

"sudo rm -f /var/lib/pacman/db.lck" 
This command removes Pacman's database lock. The database lock prevents multiple Pacman instances from running at the same time and interfering with each other.
ATTENTION: Only run this command when no other Pacman instance (e.g. Pacman, Yaourt, Pamac, Octopi, PacmanXG4, ...) is running.

"sudo pacman-mirrors -g && sudo pacman -Syy"
This command searches for working and good Manjaro repository mirrors/servers. It will automatically choose the closest server for you. The second command forces a redownload of the latest package database from the best Manjaro repository mirror. 

"sudo dirmngr </dev/null"
Sometimes during key management the package "dirmngr" outputs error messages, which interrupt key management processes (such as the following commands). This command prevents any output from "dirmngr".

"sudo rm -r /etc/pacman.d/gnupg &>/dev/null"
This command deletes your Pacman, Manjaro, and Arch key database. It does not output an error in case the package "gnupg" is not installed on your system.
ATTENTION: This command will remove all keys from your system, including manually installed keys (with "sudo pacman-key --lsign-key <KEY>"). Please remember to reinstall those keys again after FIX ERRORS has completed!

"sudo pacman -Sy gnupg archlinux-keyring manjaro-keyring"
This command (re-)installs the "gnupg" package and keyrings for Arch Linux and Manjaro. Pacli actually does not use this command but instead downloads and installs these packages manually. This makes it possible to install these packages even if no other packages can be installed on your system due to key database errors.
ATTENTION: If you want to execute this command on a system with key database problems, it will not work for you! In this case, connect manually (via your browser) to your Manjaro repository server, download these packages, and install these packages manually. Pacli will do all of this automatically for you. If this part of Pacli fails, please wait a couple of hours until your Manjaro mirror has synchronized with the main Manjaro repository and offers the latest version of these 3 packages: gnupg, archlinux-keyring, manjaro-keyring.

"sudo pacman-key --init && sudo pacman-key --populate archlinux manjaro"
These two commands create a fresh key for you and (re-)install all keys from Arch Linux and Manjaro. This will solve problems with your local key database and Manjaro's and Arch's key database. Such problems can occur when new new Arch Linux or Manjaro packagers get added, for example.
ATTENTION: This command only works, when your system time is set correctly, becasue checking and importing keys or fingerprints is time sensitive! Please make sure of that before you run FIX ERRORS. If you have not set your timezone and/or summer saving time, you should still be able to import keys, though.
ATTENTION: This command might take a long time to complete. If your system appears to stop or hang, it searches for entropy in order to generate a new key for you. In this case, it might help to do file operations with a lot of reads and/or writes per minute (such as searching for files, copying large directories, etc.). Alternatively, you can open a browser and do some heavy surfing (with a lot of mouse movements, mouse klicks, and keyboard key presses): This can help to generate entropy much faster.

"sudo pacman -Sc"
After an unseccessful attempt to update your system (which quit with a key error), you might have already downloaded unsigned packages to your pacman cache. These packages cannot be installed anymore.
This command removes all packages from your pacman cache, which are not installed on your system. Afterwards, you need to download all previously downloaded but unsuccessfully installed packages again.
ATTENTION: This command makes it impossible to DOWNGRADE PACKAGES on systems without an active internet connection.

"sudo pacman -Syyuu"
This last command forces a redownload of the latest package database from the best Manjaro repository mirror. Then, all your installed packages are checked against this latest package database. If an updated package is available from the Manjaro repositories, it will get downloaded and installed on your system. If an installed package is newer than the same package in the Manjaro repositories, the installed package will get downgraded. This behavior ensures your packages are always in sync with the Manajro repositories, even if you have just switched the Manjaro mirror or switched from unstable to stable branch.

13 - FORCE UPDATE SYSTEM
"sudo pacman -Syu --force"
This command does the same as UPDATE SYSTEM, but it bypasses file conflict tests and overwrites conflicting files. All files will be overwritten. 

14 - EMPTY PACKAGE CACHE
"yaourt -Scc"
This command will empty your entire package cache by deleting ALL packages.
ATTENTION: This will make it impossible to reinstall old packages or DOWNGRADE PACKAGES without a working internet connection.

15 - FORCE INSTALL PACKAGE
"sudo pacman -S --force <PACKAGE NAME>"
This command does the same as INSTALL PACKAGE, but it forces the installation of <PACKAGE NAME>.

16 - FORCE REMOVE PACKAGE
"pacman -Rdd <PACKAGE NAME>"
This command removes <PACKAGE NAME> without checking the dependencies of <PACKAGE NAME> first. This enables experienced users to remove packages and dependencies of packages. This command only removes <PACKAGE NAME> from your system. All dependencies and orphans are left: run CLEAN SYSTEM afterwards to remove them, too.
ATTENTION: This command can break pacakges on your system or even your entire system.

17 - FORCE UPDATE AUR
"yaourt -Syua && yaourt -Syua --devel --needed --noconfirm"
The Arch User Repository (AUR) is a repository of (mostly) PKGBUILD files. Everybody can create such a PKGBUILD file and upload it to the AUR. A PKGBUILD file contains simple and human readable instructions like where to download the source code from, what dependencies are needed, where to copy files for installation, etc. Yaourt is a so called AUR Helper: It can interpret PKGBUILD files and download the source code, install dependencies, build files on your system, and copy these files to the right location (a.k.a. installing a program).
By checking a PKGBUILD file (and .INSTALL file) you can make sure the source code is loaded from an official download server, no harmful dependencies get installed, and the installation instructions do not contain harmful code.
A lot of PKGBUILD files contain variables (e.g. program version) in download addresses; this makes them download always the latest source code (e.g. from Github). Some PKGBUILD files contain no variables: These PKGBUILD files need to be changed manually every time a new program version is released.
The first command of FORCE UPDATE AUR does the same as the second command of UPDATE SYSTEM: Only AUR packages with updated/changed PKGBUILD files will get updated. This gives you the chance to check these updated/changed PKGBUILD files. 
The second command of FORCE UPDATE AUR forces a reinstall of ALL your developmental AUR packages (i.e. all git, svn, and cvs-packages). The "--noconfirm" flag is used in a secure way, because no PKGBUILD files have changed since the first command got executed.
ATTENTION: This might take a long time! By default, after every 15min this command will pause and ask again for your password.

18 - LIST INSTALLED FROM AUR
"pacman -Qem"
This command lists all installed packages, which are from the AUR or which were manually installed.

19 - SEARCH + INSTALL FROM AUR
"yaourt <PACKAGE NAME>"
This command searches for <PACKAGE NAME> in all Manjaro repositories and the Arch User Repository (AUR). It searches in all package names and package descriptions. 
Example: You can search for "web browser" and you will find Firefox and other web browsers. One or multiple search results can be installed on your system.
If you want to exit this mode without installing any packages, simply press [Enter].

20 - INSTALL FROM AUR
"yaourt -S <PACKAGE NAME>"
This command does the same as INSTALL PACKAGE. Additionally, Arch User Repository (AUR) packages can be installed.
ATTENTION: Experienced users can install packages from the AUR without the need to answer questions all the time by using the command "yaourt -S <PACKAGE NAME> --noconfirm". The "--noconfirm" flag is great for quick and dirty installations of AUR packages on non-secure systems. Please keep always in mind that the AUR can contain any sort of package - including malicious and destructive (parts of) packages. Therefore, it is recommended to always check the PKGBUILD and .INSTALL file manually before installing a package from the AUR.


To exit this Help Page, press "q".

			EOF
			
		fi
}



# write argument of "pacli $1" to "input" variable
input=$1

# if "input" starts with a "-" or "--" symbol, the "-" symbol(s) gets removed from the beginnig of "input" variable
input=${input#-}
input=${input#-} 


# the following function checks, whether a prefix (func_) + varialbe "input" is a valid function. after the function is done an "exit" command is needed to prevent the UI from loading.
if [[ $(type -t "func_$input") == 'function' ]] 
then
    "func_$input" 1		# pass one parameter (1) when the funciton got called directly, if you want in future specific actions for console or menu
    exit $?			# exit here, no write in all functions and return error code if present
elif (($# > 0))		# if one or more parameter
then  			
    echo "Bad console command. Press ENTER to start the UI or CTRL+C to abort."
    read
    # now, continue with this script without exiting.	
fi

unset input



# =======================



# ANSI Escape sequences:
#  \e[31m	# red text
#  \e[41m	# red background
#  \e[0m	# no-colored, non-bold text without background color
#  \e[1m	# bold text


# pacli bash script starts here
while true
do
# display menu. please note the use of ANSI Escape sequences mentioned above. The code can be hard to read...
    clear
    echo
    echo -e "                    \e[0m ::Pacli - Package manager:: "
    echo -e " ┌────────────────────────────────────────────────────────────────────┐"
    echo -e " │   1   \e[1mU\e[0mpdate System                 2   \e[1mC\e[0mlean System               │"
    echo -e " │   3   \e[1mI\e[0mnstall Package               4   \e[1mR\e[0memove Package + Deps      │"
    echo -e " │--------------------------------------------------------------------│"
    echo -e " │   5   Package \e[1mInfo\e[0mrmation           6   \e[1mL\e[0mist Local Package Files   │"
    echo -e " │   7   Dependency \e[1mT\e[0mree               8   \e[1mR\e[0meverse Dependency \e[1mT\e[0mree    │"
    echo -e " └────────────────────────────────────────────────────────────────────┘"
    echo -e " ┌────────────────────────────────────────────────────────────────────┐"
    echo -e " │   9   Pacman \e[1mLog\e[0m                   10   \e[1mD\e[0mowngrade Packages         │"
    echo -e " │  11   \e[1mH\e[0melp                     \e[31m    12   \e[1mFix\e[0m\e[31m Errors                \e[0m │"
    echo -e " │ \e[31m 13   \e[1mF\e[0m\e[31morce \e[1mU\e[0m\e[31mpdate System          14   \e[1mEmpty\e[0m\e[31m Package Cache       \e[0m │"
    echo -e " │ \e[31m 15   \e[1mF\e[0m\e[31morce \e[1mI\e[0m\e[31mnstall Package        16   \e[1mF\e[0m\e[31morce \e[1mR\e[0m\e[31memove Package      \e[0m │"
    echo -e " └────────────────────────────────────────────────────────────────────┘"
    echo -e " ┌────────────────────────────────────────────────────────────────────┐"
    echo -e " │  17   Force \e[1mU\e[0mpdate \e[1mA\e[0mUR             18   \e[1mL\e[0mist Installed from \e[1mA\e[0mUR    │"
    echo -e " │  19   Search + Install from \e[1mA\e[0mUR    20   \e[1mI\e[0mnstall from \e[1mA\e[0mUR           │"
    echo -e " └────────────────────────────────────────────────────────────────────┘"
    echo
    echo -e "  Enter a number or marked letters and press [Enter]  -  0  \e[1mE\e[0mxit Pacli "

    # save entered number in varialbe "choice" and test, whether "chioce" fits any of the following numbers, letters, or words
    read -r choice
    case $choice in


        1|u|U|update|Update|UPDATE)
            # the line above means: the following commands will get executed if $choice is "1" or "u" or "U" or "update" or ...
            echo
            func_u
            echo
            echo -e " Your system is updated. To return to pacli press [Enter] "
            read
            ;;
        2|c|C|clean|Clean|CLEAN)
            echo
			func_c
            echo
            echo -e " Fast Mirror chosen, orphans removed, and old packages deleted from cache. To return to pacli press [Enter] "
            read
            ;;
        3|i|I|install|Install|INSTALL)
            echo
			func_i
            echo
            echo -e " Package installation is finished. To return to pacli press [Enter] "
            read
            ;;
        4|r|R|remove|Remove|REMOVE)
            echo
			func_r
			echo
            echo -e " Packages and all unneeded dependencies removed. To return to pacli press [Enter] "
            read
            ;;
        5|info|Info|INFO|information|Information|INFORMATION)
            echo
			func_info
            echo
            echo -e " Package information displayed. To return to pacli press [Enter] "
            read
            ;;
        6|l|L|list|List|LIST)
            echo
			func_l
            echo
            ;;
        7|t|T|tree|Tree|TREE)
            echo
			func_t
            echo
            echo -e " Dependency tree displayed. Navigate with CTRL+PageUp. To return to pacli press [Enter] "
            read
            ;;
        8|rt|RT|rT|Rt|reversetree|ReverseTree|REVERSETREE)
            echo
			func_rt
            echo
            echo -e " Reverse dependency tree displayed. Navigate with CTRL+PageUp. To return to pacli press [Enter] "
            read
            ;;


        9|log|Log|LOG)
            echo
			func_log
            echo
            ;;			
        10|d|D|down|Down|DOWN|downgrade|Downgrade|DOWNGRADE)
            echo
			func_d
            echo
            echo -e " Downgrade process finished. To return to pacli press [Enter] "
            read
            ;;
        11|00|33|44|55|66|77|88|99|100|111|122|133|144|155|166|177|188|199|200|211|h|H|help|Help|HELP)
            echo
            func_h
            echo
            ;;
        12|fix|Fix|FIX)
            echo
			func_fix
            echo
            echo -e " Most common Pacman errors fixed and system updated. To return to pacli press [Enter] "
            read
            ;;
        13|fu|Fu|fU|FU|forceupdate|ForceUpdate|FORCEUPDATE)
            echo
			func_fu
            echo
            echo -e " Your system was updated in force mode. To return to pacli press [Enter] "
            read
            ;;
        14|empty|Empty|EMPTY)
            echo
			func_empty
            echo
            echo -e " Entire package cache emptied. To return to pacli press [Enter] "
            read
            ;;
        15|fi|Fi|fI|FI|forceinstall|ForceInstall|FORCEINSTALL)
            echo
			func_fi
            echo
            echo -e " Package installation in force mode is finished. To return to pacli press [Enter] "
            read
            ;;

        16|fr|Fr|fR|FR|forceremove|ForceRemove|FORCEREMOVE)
            echo
			func_fr
			echo
            echo -e " Dependency in force mode removed. To return to pacli press [Enter] "
            read
            ;;


        17|ua|UA|fua|FUA|forceupdateaur|forceupdateAUR|ForceUpdateAur|ForceUpdateAUR|FORCEUPDATEAUR|updateaur|updateAUR|UPDATEAUR)
            echo
			func_ua
            echo
            echo -e " All AUR packages with available updates reinstalled. To return to pacli press [Enter] "
            read
            ;;
        18|la|La|lA|LA|listaur|listAUR|ListAur|ListAUR|LISTAUR)
            echo
			func_la
            echo
            echo -e " All locally installed packages listed. To return to pacli press [Enter] "
            read
            ;;
        19|a|A|aur|AUR)
            echo
			func_a
            echo
            echo -e " Yaourt finished. To return to pacli press [Enter] "
            read
            ;;
        20|ia|Ia|iA|IA|installaur|InstallAur|InstallAUR|INSTALLAUR)
            echo
			func_ia
            echo
            echo -e " Installation from AUR finished. To return to pacli press [Enter] "
            read
            ;;


        0|e|E|exit|Exit|EXIT|q|Q|quit|Quit|QUIT)
            echo
            clear && exit
            ;;

        *)
            echo -e "\e[41m Wrong option \e[0m"
            echo "Wait and try again later..."
            echo
            sleep 1
            clear
            ;;
    esac
done
